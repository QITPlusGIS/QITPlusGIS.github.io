import{a as p,y as n,c as b,u as S,o as l,b as C,s as E,f as R,S as $}from"./uuid-11f8a774.js";import{a as I}from"./BitmapContainer-af077718.js";import{m as q,u as U}from"./LayerView-5b88715e.js";import{v as V}from"./ExportStrategy-015f2f13.js";import{a as W}from"./RefreshableLayerView-3d9d158a.js";import{j as L}from"./commonProperties-f89d14c0.js";import{o as j}from"./ExportWMSImageParameters-6443d1d7.js";import"./index-9591f551.js";import"./WGLContainer-c9b60762.js";import"./definitions-8354b929.js";import"./FramebufferObject-276d0d17.js";import"./Texture-2cfb434c.js";import"./capabilities-c523e723.js";import"./enums-bdecffa2.js";import"./ProgramTemplate-112d69b6.js";import"./commonjsHelpers-2f3e7994.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-32a3c8c6.js";import"./enums-f1a6a48a.js";import"./GeometryUtils-9172a54e.js";import"./heatmapUtils-f451477b.js";import"./vec4f64-3c9d0901.js";import"./mat3f32-6c416b1c.js";import"./StyleDefinition-29c49b98.js";import"./vec2f32-eaf29605.js";import"./config-1337d16e.js";import"./Container-c1db96c2.js";import"./parser-e8657b5e.js";import"./mat4f32-60a2394b.js";import"./mat4-a716043f.js";import"./earcut-b84353bc.js";import"./vec2-178908bd.js";import"./vec2f64-95bf678d.js";import"./featureConversionUtils-7017a7c2.js";import"./OptimizedFeature-ded94d90.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./scaleUtils-3367fb97.js";import"./map-beb54af9.js";import"./Basemap-e835b2ff.js";import"./loadAll-ed668eae.js";import"./PortalItem-6e04dd29.js";import"./writeUtils-08445a52.js";import"./layerUtils-c5e7bd79.js";import"./compilerUtils-4589e991.js";import"./CollectionFlattener-3b7ee789.js";import"./infoFor3D-24efd44a.js";import"./basemapUtils-1bb3cee3.js";import"./TablesMixin-abbae55c.js";import"./arcgisLayerUrl-f89b3daf.js";import"./Cyclical-3ead80f1.js";import"./workers-194c6572.js";import"./TileInfo-0752eafb.js";import"./jsxFactory-3225406e.js";import"./UpdatingHandles-453b6cae.js";import"./signal-9889a3e2.js";import"./GraphicsCollection-4a6a6bbf.js";import"./ViewingMode-fb6259a5.js";import"./unitBezier-881ac1eb.js";import"./mat2df32-f849f6ea.js";import"./TileStore-488f52a1.js";import"./quickselect-149a6b43.js";import"./QuantizationParameters-047a8fb0.js";import"./TileInfoView-3c33d57f.js";import"./normalizeUtils-b40b80d9.js";import"./normalizeUtilsCommon-44f2a7f8.js";import"./mat3-03bcfe6d.js";import"./GoTo-576c62ef.js";import"./Bitmap-7421f3d6.js";import"./ElevationInfo-799a9463.js";import"./lengthUtils-782f0f7c.js";const H=e=>{let t=class extends e{initialize(){this.exportImageParameters=new j({layer:this.layer})}destroy(){this.exportImageParameters=S(this.exportImageParameters)}get exportImageVersion(){var r;return(r=this.exportImageParameters)==null||r.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}fetchPopupFeatures(r){const{layer:o}=this;if(!r)return Promise.reject(new l("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:o}));const{popupEnabled:m}=o;if(!m)return Promise.reject(new l("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:m}));const u=this.createFetchPopupFeaturesQuery(r);if(!u)return Promise.resolve([]);const{extent:i,width:a,height:s,x:d,y:c}=u;if(!(i&&a&&s))throw new l("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:i,width:a,height:s});return o.fetchFeatureInfo(i,a,s,d,c)}};return p([n()],t.prototype,"exportImageParameters",void 0),p([n({readOnly:!0})],t.prototype,"exportImageVersion",null),p([n()],t.prototype,"layer",void 0),p([n(L)],t.prototype,"timeExtent",void 0),t=p([b("esri.layers.mixins.WMSLayerView")],t),t};let h=class extends H(W(q(U))){constructor(){super(...arguments),this.bitmapContainer=new I}supportsSpatialReference(e){return this.layer.serviceSupportsSpatialReference(e)}update(e){this.strategy.update(e).catch(t=>{C(t)||E.getLogger(this).error(t)})}attach(){const{layer:e}=this,{imageMaxHeight:t,imageMaxWidth:r}=e;this.bitmapContainer=new I,this.container.addChild(this.bitmapContainer),this.strategy=new V({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:t,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=S(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(e){const{view:t,bitmapContainer:r}=this,{x:o,y:m}=e,{spatialReference:u}=t;let i,a=0,s=0;if(r.children.some(F=>{const{width:x,height:f,resolution:w,x:y,y:g}=F,v=y+w*x,P=g-w*f;return o>=y&&o<=v&&m<=g&&m>=P&&(i=new $({xmin:y,ymin:P,xmax:v,ymax:g,spatialReference:u}),a=x,s=f,!0)}),!i)return null;const d=i.width/a,c=Math.round((o-i.xmin)/d),M=Math.round((i.ymax-m)/d);return{extent:i,width:a,height:s,x:c,y:M}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,r,o){return this.layer.fetchImageBitmap(e,t,r,{timeExtent:this.timeExtent,...o})}};p([n()],h.prototype,"strategy",void 0),p([n()],h.prototype,"updating",void 0),h=p([b("esri.views.2d.layers.WMSLayerView2D")],h);const te=h;export{te as default};
