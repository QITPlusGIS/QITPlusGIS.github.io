import{W as _,M as v,a1 as S,z as c,d1 as T,o as u,d2 as b,a as s,y as a,S as w,T as $,d3 as O,c as R}from"./uuid-896b9aab.js";import{t as W}from"./loadAll-9301c4be.js";import{m as U}from"./MultiOriginJSONSupport-3a78e066.js";import{p as j,w as P,v as L,a as M}from"./arcgisLayerUrl-babbe1bf.js";import{i as A}from"./APIKeyMixin-60d9f7d0.js";import{p as B}from"./ArcGISCachedService-c9777309.js";import{E as I,f as N,X as C}from"./SublayersOwner-e5fc6d6e.js";import{l as k}from"./ArcGISService-ca2440e3.js";import{a as D}from"./BlendLayer-d89d05a2.js";import{o as J}from"./CustomParametersMixin-4711adcc.js";import{u as q}from"./OperationalLayer-db945a99.js";import{j as G}from"./PortalLayer-d46cf7fb.js";import{f as E}from"./RefreshableLayer-216f1bc8.js";import{t as V}from"./ScaleRangeLayer-c70a8fe7.js";import{d as x}from"./commonProperties-6f21cf48.js";import{o as y}from"./imageBitmapUtils-f0261fe6.js";import"./index-36e9aec6.js";import"./TileInfo-6cf97248.js";import"./TileInfoTilemapCache-1139a53d.js";import"./TilemapCache-caab82a2.js";import"./ByteSizeUnit-d4757d40.js";import"./LRUCache-6cfe7ff6.js";import"./DictionaryLoader-3b50e321.js";import"./FieldsIndex-b9e92cab.js";import"./portalItemUtils-50147700.js";import"./CollectionFlattener-0d53fafe.js";import"./UniqueValueRenderer-5d584a21.js";import"./LegendOptions-cec1028c.js";import"./diffUtils-a3a9db51.js";import"./SizeVariable-b5ce232d.js";import"./colorRamps-25747e5c.js";import"./compilerUtils-b3a0c560.js";import"./lengthUtils-4ab57232.js";import"./ColorStop-3d508119.js";import"./jsonUtils-3767cca3.js";import"./layerUtils-71133796.js";import"./styleUtils-885e3cac.js";import"./jsonUtils-ac311f38.js";import"./heatmapUtils-27bad519.js";import"./vec4f64-3c9d0901.js";import"./QueryTask-7ee13cfe.js";import"./infoFor3D-24efd44a.js";import"./Query-2995d860.js";import"./Field-44a4dae2.js";import"./fieldType-39083810.js";import"./FullTextSearch-bf557d06.js";import"./QuantizationParameters-8e0f5300.js";import"./executeForIds-1c2fb3ce.js";import"./query-20f49266.js";import"./normalizeUtils-74c17e0f.js";import"./normalizeUtilsCommon-24d2691e.js";import"./pbfQueryUtils-9d4b7597.js";import"./pbf-b3c65c97.js";import"./OptimizedFeature-ded94d90.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-00692237.js";import"./executeQueryJSON-51fb0691.js";import"./FeatureSet-536478a2.js";import"./executeQueryPBF-00413614.js";import"./featureConversionUtils-35751811.js";import"./FeatureType-a5e62fd2.js";import"./FeatureTemplate-5d7372f9.js";import"./LabelClass-961ff56d.js";import"./labelUtils-21b484ec.js";import"./defaultsJSON-b087dd4d.js";import"./labelingInfo-926370a5.js";import"./LayerFloorInfo-fc9dcbd1.js";import"./serviceCapabilitiesUtils-40e4709f.js";import"./AttachmentQuery-98e24455.js";import"./popupUtils-ca8ca81d.js";import"./sublayerUtils-3deaaa2f.js";import"./jsonUtils-84d8e543.js";import"./parser-14d23883.js";import"./mat4f32-60a2394b.js";import"./mat4-318655b6.js";import"./PortalItem-6f01e175.js";import"./ElevationInfo-8d60fc5a.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends D(V(I(B(N(q(G(k(U(E(A(J(M)))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(_).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){var t;return(e=e||((t=r.tileInfo)==null?void 0:t.spatialReference))&&v.fromJSON(e)}writeSublayers(e,r,t,o){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray(),p=[],m={writeSublayerStructure:!1,...o};n.forEach(l=>{const h=l.write({},m);p.push(h)}),p.some(l=>Object.keys(l).length>1)&&(r.layers=p)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>S(r).path):null}fetchTile(e,r,t,o={}){const{signal:n}=o,p=this.getTileUrl(e,r,t),m={responseType:"image",signal:n,query:{...this.refreshParameters}};return c(p,m).then(l=>l.data)}async fetchImageBitmapTile(e,r,t,o={}){const{signal:n}=o;if(this.fetchTile!==d.prototype.fetchTile){const h=await this.fetchTile(e,r,t,o);return y(h,e,r,t,n)}const p=this.getTileUrl(e,r,t),m={responseType:"blob",signal:n,query:{...this.refreshParameters}},{data:l}=await c(p,m);return y(l,e,r,t,n)}getTileUrl(e,r,t){var m,l;const o=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,n=T({...(m=this.parsedUrl)==null?void 0:m.query,blankTile:!o&&null,...this.customParameters,token:this.apiKey}),p=this.tileServers;return`${p&&p.length?p[r%p.length]:(l=this.parsedUrl)==null?void 0:l.path}/tile/${e}/${r}/${t}${n?"?"+n:""}`}loadAll(){return W(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new u("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new u("tile-layer:undefined-url","layer's url is not defined");const o=j(this.parsedUrl.path);if(o!=null&&o.serverType==="ImageServer")throw new u("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");c(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!P(t))return this._fetchServerVersion(t,e).then(o=>{this.read({currentVersion:o})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!L(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return c(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(o=>{if(o.data&&o.data.currentVersion)return o.data.currentVersion;throw new u("tile-layer:version-not-available")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,o=f.length;t<o;t++)if(r=f[t],r.toLowerCase().includes(e))return b("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};s([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),s([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),s([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([a({type:Boolean})],i.prototype,"resampling",void 0),s([a()],i.prototype,"sourceJSON",void 0),s([a({type:v})],i.prototype,"spatialReference",void 0),s([w("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),s([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),s([a({readOnly:!0})],i.prototype,"sublayers",void 0),s([$("sublayers",{layers:{type:[C]}})],i.prototype,"writeSublayers",null),s([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([a()],i.prototype,"tileServers",null),s([O("tileServers")],i.prototype,"castTileServers",null),s([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),s([a(x)],i.prototype,"url",void 0),i=d=s([R("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const yr=i;export{yr as default};
