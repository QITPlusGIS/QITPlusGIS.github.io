import{W as $,cP as b,bf as f,cW as w,z as g,R as I,o as v,b as T,a as s,y as p,cX as x,S as E,T as O,c as M,aJ as R}from"./uuid-8543c34e.js";import{c as P,a as F}from"./arcgisLayerUrl-ec2f2135.js";import{t as L}from"./loadAll-97b0a04e.js";import{m as j}from"./MultiOriginJSONSupport-0b650e25.js";import{i as J}from"./scaleUtils-8d8ec80b.js";import{i as N}from"./APIKeyMixin-96e5d80c.js";import{E as U,f as q,X as A}from"./SublayersOwner-c4b8f869.js";import{l as _}from"./ArcGISService-5ec94bea.js";import{a as k}from"./BlendLayer-69a06cfc.js";import{o as z}from"./CustomParametersMixin-81ca532a.js";import{u as V}from"./OperationalLayer-16bd961b.js";import{j as W}from"./PortalLayer-1236c832.js";import{f as Z}from"./RefreshableLayer-3d275e6c.js";import{t as B}from"./ScaleRangeLayer-8e351e9d.js";import{a as C}from"./TemporalLayer-d7a5502b.js";import{d as D}from"./commonProperties-33a2de5d.js";import{m as G}from"./ExportImageParameters-99221a22.js";import{t as H}from"./imageBitmapUtils-2797dbb5.js";import{e as S}from"./sublayerUtils-98542cd3.js";import{e as K}from"./versionUtils-a63f1dc6.js";import"./index-71f6c0ac.js";import"./DictionaryLoader-77016f21.js";import"./LRUCache-20778572.js";import"./FieldsIndex-8f568a88.js";import"./portalItemUtils-cfa001ef.js";import"./CollectionFlattener-e4b1221f.js";import"./UniqueValueRenderer-5377a072.js";import"./LegendOptions-5787bf37.js";import"./diffUtils-2f40bb41.js";import"./SizeVariable-569fefc3.js";import"./colorRamps-6df6d6f7.js";import"./compilerUtils-b6fccf25.js";import"./lengthUtils-7e41a327.js";import"./ColorStop-d7d9c239.js";import"./jsonUtils-f5725ae9.js";import"./layerUtils-60bab848.js";import"./styleUtils-94d35cb4.js";import"./jsonUtils-cd25f8ce.js";import"./heatmapUtils-7f7225e7.js";import"./vec4f64-3c9d0901.js";import"./QueryTask-3b99edc2.js";import"./infoFor3D-24efd44a.js";import"./Query-6436d464.js";import"./Field-d39fc769.js";import"./fieldType-2c1216fb.js";import"./FullTextSearch-aa688208.js";import"./QuantizationParameters-5bcf1f9a.js";import"./executeForIds-34aa5f80.js";import"./query-157110ef.js";import"./normalizeUtils-dd0d9796.js";import"./normalizeUtilsCommon-1d284c7d.js";import"./pbfQueryUtils-5a795751.js";import"./pbf-bff74155.js";import"./OptimizedFeature-ded94d90.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-f627fdd4.js";import"./executeQueryJSON-8e3037f1.js";import"./FeatureSet-5aedb17a.js";import"./executeQueryPBF-ffc1fd72.js";import"./featureConversionUtils-f2db813b.js";import"./FeatureType-dede8b35.js";import"./FeatureTemplate-6db887d6.js";import"./LabelClass-766d0bd7.js";import"./labelUtils-308d1e86.js";import"./defaultsJSON-b087dd4d.js";import"./labelingInfo-cc2f73a7.js";import"./LayerFloorInfo-9ed56392.js";import"./serviceCapabilitiesUtils-2125f780.js";import"./AttachmentQuery-89503620.js";import"./popupUtils-49cf1e32.js";import"./jsonUtils-7a48f99d.js";import"./parser-01d0d370.js";import"./mat4f32-60a2394b.js";import"./mat4-f427906c.js";import"./PortalItem-40a43a90.js";import"./ElevationInfo-4de725df.js";import"./floorFilterUtils-080a7cd2.js";let o=class extends k(C(B(U(q(_(V(W(j(Z(N(z(F)))))))))))){constructor(...t){super(...t),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,i){return typeof t=="string"?{url:t,...i}:t}load(t){const i=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch($).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(t,i){const n=i.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(t,i,n,e){var h;if(!this.loaded||!t)return;const a=t.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let m=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(e.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;m=S(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");m=S(a,c.sublayers,b(c.origin))}}const l=[],y={writeSublayerStructure:m,...e};let d=m;a.forEach(r=>{const c=r.write({},y);l.push(c),d=d||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(i.layers=l),d&&(i.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(t,i,n,e){const a=(e==null?void 0:e.pixelRatio)||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian());const m=new G({layer:this,floors:e==null?void 0:e.floors,scale:J({extent:t,width:i})*a}),l=m.toJSON();m.destroy();const y=!(e!=null&&e.rotation)||this.version<10.3?{}:{rotation:-e.rotation},d=t==null?void 0:t.spatialReference,h=w(d);l.dpi*=a;const r={};if(e!=null&&e.timeExtent){const{start:c,end:u}=e.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:t&&t.xmin+","+t.ymin+","+t.xmax+","+t.ymax,bboxSR:h,imageSR:h,size:i+","+n,...l,...y,...r}}async fetchImage(t,i,n,e){const{data:a}=await this._fetchImage("image",t,i,n,e);return a}async fetchImageBitmap(t,i,n,e){const{data:a,url:m}=await this._fetchImage("blob",t,i,n,e);return H(a,m,e==null?void 0:e.signal)}async fetchRecomputedExtents(t={}){const i={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,i),{extent:e,fullExtent:a,timeExtent:m}=n,l=e||a;return{fullExtent:l&&I.fromJSON(l),timeExtent:m&&P.fromJSON({start:m[0],end:m[1]})}}loadAll(){return L(this,t=>{t(this.allSublayers)})}serviceSupportsSpatialReference(t){return K(this,t)}async _fetchImage(t,i,n,e,a){var y,d,h;const m={responseType:t,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,n,e,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((y=m.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:r}=await g(l,m);return{data:r,url:l}}catch(r){throw T(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([p(x("dateFieldsTimeReference"))],o.prototype,"dateFieldsTimeZone",void 0),s([p({type:Boolean})],o.prototype,"datesInUnknownTimezone",void 0),s([p()],o.prototype,"dpi",void 0),s([p()],o.prototype,"gdbVersion",void 0),s([p()],o.prototype,"imageFormat",void 0),s([E("imageFormat",["supportedImageFormatTypes"])],o.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],o.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],o.prototype,"imageMaxWidth",void 0),s([p()],o.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],o.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],o.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"popupEnabled",void 0),s([p(x("preferredTimeReference"))],o.prototype,"preferredTimeZone",void 0),s([p()],o.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],o.prototype,"sublayers",void 0),s([O("sublayers",{layers:{type:[A]},visibleLayers:{type:[R]}})],o.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],o.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],o.prototype,"type",void 0),s([p(D)],o.prototype,"url",void 0),o=s([M("esri.layers.MapImageLayer")],o);const xe=o;export{xe as default};
