import{e as w,d as y,b as l,s as I,a as m,y as c,c as V}from"./uuid-fb53ae2e.js";import{i as v}from"./GraphicsCollection-2966693c.js";import"./Container-15ae821f.js";import"./capabilities-6261cefc.js";import"./BufferPool-f1313648.js";import"./color-a4b304a5.js";import"./WGLContainer-a031049d.js";import"./enums-bdecffa2.js";import"./Texture-909bfb08.js";import"./ProgramTemplate-12d63168.js";import"./definitions-d96ec118.js";import"./GeometryUtils-c1de866e.js";import"./FramebufferObject-f8937356.js";import"./StyleDefinition-29c49b98.js";import"./vec2f32-eaf29605.js";import"./enums-fb086c25.js";import"./MagnifierPrograms-83cf9dff.js";import"./OrderIndependentTransparency-6ae10952.js";import"./floatRGBA-04143c6a.js";import"./testSVGPremultipliedAlpha-ad111ba4.js";import{r as H}from"./GraphicsView2D-cf1235ce.js";import"./AttributeStoreView-43278226.js";import"./earcut-b84353bc.js";import"./featureConversionUtils-5ad02385.js";import"./lengthUtils-5d9bdf3f.js";import"./vec3f32-2da9db36.js";import"./normalizeUtils-a2b8b8b6.js";import{r as T,o as g,n as f}from"./imageUtils-932a49a3.js";import{m as q,u as U}from"./LayerView-8590f61c.js";import{a as S}from"./HighlightGraphicContainer-5db5c709.js";import{h as b,e as d}from"./TileInfoView-be4d795d.js";import{y as C,r as Q}from"./mat2df32-b9bfc1f5.js";import{a as $}from"./RefreshableLayerView-f354dee3.js";import{S as P,G as k,r as F}from"./drapedUtils-a4b2d4ef.js";import"./index-e42a63f9.js";import"./mat3f32-6c416b1c.js";import"./parser-450a99c3.js";import"./mat4f32-60a2394b.js";import"./mat4-f091cc2b.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./heatmapUtils-c2569515.js";import"./vec4f64-3c9d0901.js";import"./config-1337d16e.js";import"./vec2-aed931ac.js";import"./vec2f64-95bf678d.js";import"./OptimizedFeature-ded94d90.js";import"./commonjsHelpers-2f3e7994.js";import"./ExpandedCIM-870ec490.js";import"./BidiEngine-9a40f2f4.js";import"./visualVariablesUtils-e6903ea9.js";import"./GeometryUtils-984e8446.js";import"./utils-d023eda3.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-7998a127.js";import"./rasterizingUtils-7a00076e.js";import"./pbf-0c5d1fff.js";import"./imageutils-8a04d22c.js";import"./Matcher-5cde60f7.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-470e4fcd.js";import"./defaultsJSON-b087dd4d.js";import"./LRUCache-9b8f5520.js";import"./TileStore-6570f2cc.js";import"./workers-3c8ba252.js";import"./signal-a61cc993.js";import"./quickselect-149a6b43.js";import"./QuantizationParameters-a323cbe3.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-1c26e0db.js";import"./FieldsIndex-406a2400.js";import"./TimeOnly-f07e8b54.js";import"./diffUtils-7a67a389.js";import"./UpdatingHandles-9a53fef9.js";import"./map-7e5b196a.js";import"./Basemap-fc4d26ee.js";import"./loadAll-76369e9a.js";import"./PortalItem-01395053.js";import"./writeUtils-3673b1a7.js";import"./layerUtils-a8920453.js";import"./compilerUtils-811a6f43.js";import"./CollectionFlattener-5cd5b172.js";import"./infoFor3D-24efd44a.js";import"./basemapUtils-0a6b5a56.js";import"./TablesMixin-2871072c.js";import"./arcgisLayerUrl-fc2d909c.js";import"./Cyclical-8c26e7c7.js";import"./TileInfo-238dd4b6.js";import"./jsxFactory-8f2e778f.js";import"./ViewingMode-fb6259a5.js";import"./unitBezier-881ac1eb.js";import"./mat3-1b291d2f.js";import"./GoTo-2cdac7e7.js";import"./basicInterfaces-11f56cb3.js";import"./normalizeUtilsSync-20755c4d.js";import"./normalizeUtilsCommon-05ad6f6d.js";import"./projectionSupport-29174b46.js";import"./json-48e3ea08.js";import"./LabelClass-03af2031.js";import"./labelUtils-f4e57b25.js";import"./jsonUtils-6741d81c.js";import"./TiledDisplayObject-097260a9.js";import"./labelingInfo-144cafce.js";import"./clusterUtils-80867c68.js";import"./MD5-715f37cd.js";import"./SizeVariable-d8011d21.js";import"./colorRamps-18dfa72a.js";import"./LegendOptions-21ba0c6d.js";import"./util-0cf8b7dd.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-de805481.js";import"./Bitmap-f012754b.js";import"./TileContainer-a854d921.js";import"./scaleUtils-bba7f8bb.js";import"./BaseGraphicContainer-d8dd2bed.js";import"./FeatureContainer-7b9710d6.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-9959f72e.js";import"./popupUtils-73dae124.js";const G=[0,0];let o=class extends $(T(q(U))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new v,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new b(this.layer.tileInfo,this.layer.fullExtent,i==null?void 0:i.effectiveMinLOD,i==null?void 0:i.effectiveMaxLOD),this._fetchQueue=new C({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,r)=>this.fetchTile(e,r)}),this._tileStrategy=new Q({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),P(this,this.layer)){const e=this._highlightView=new H({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new S(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(r,p)=>F(r,p,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,p)=>{e.graphicUpdateHandler({graphic:r,property:p})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,i;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(i=this._highlightView)==null||i.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):w()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return y((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(G,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e=this.tilemapCache,{signal:r,resamplingLevel:p=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(h){if(!l(h)&&!this.resampling)return g(this._tileInfoView.tileInfo.size);if(p<3){const n=this._tileInfoView.getTileParentId(t.id);if(n){const u=new d(n),_=await this.fetchTile(u,{...i,resamplingLevel:p+1});return f(this._tileInfoView,_,u,t)}}throw h}const s=new d(0,0,0,0);let a;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,s,{signal:r}),s.level!==t.level&&!this.resampling)return g(this._tileInfoView.tileInfo.size);a=await this._fetchImage(s,r)}catch(h){if(l(h))throw h;a=await this._fetchImage(t,r)}return this.resampling?f(this._tileInfoView,a,s,t):a}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){l(i)||I.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};m([c()],o.prototype,"resampling",null),m([c()],o.prototype,"tilemapCache",null),o=m([V("esri.views.2d.layers.TileLayerView2D")],o);const Ki=o;export{Ki as default};
