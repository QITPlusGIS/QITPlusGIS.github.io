import{b4 as k,A as z,V as B,f as N,de as O,u as S,S as A,N as $,df as F,dg as E,aA as W,d2 as H,a as v,y as C,c as K}from"./uuid-854440a9.js";import{b as T,_ as J}from"./arcgisLayerUrl-db50ff50.js";import{b as D,g as Y,d as Q}from"./kmlUtils-e316028c.js";import{i as P}from"./GraphicsCollection-1f93c1d2.js";import{f as X,w as Z,b as tt}from"./Bitmap-42146cc6.js";import{a as it}from"./BitmapContainer-902c6655.js";import{m as et,u as rt}from"./LayerView-80524fa4.js";import{i as M}from"./GraphicContainer-40b0e712.js";import{r as R}from"./GraphicsView2D-541ac563.js";import{C as at,e as ot}from"./rasterProjectionHelper-5b41044f.js";import{a as st}from"./WGLContainer-c3fd9b8d.js";import{N as nt,o as lt}from"./RenderingContext-585d7df7.js";import{D as U,G as pt,U as mt,X as L}from"./enums-bdecffa2.js";import{E as ht}from"./FramebufferObject-aafd1353.js";import{m as ct}from"./rasterUtils-f031f684.js";import{e as j,T as dt}from"./Texture-6ea577e5.js";import"./index-2eca610e.js";import"./jsonUtils-6ee7893f.js";import"./UniqueValueRenderer-e361d3ea.js";import"./LegendOptions-82a1d9d3.js";import"./diffUtils-2fda0782.js";import"./SizeVariable-bf59d78c.js";import"./colorRamps-2b21b939.js";import"./compilerUtils-29e4db8f.js";import"./lengthUtils-b6ebb268.js";import"./ColorStop-1ffa7beb.js";import"./jsonUtils-1956249c.js";import"./layerUtils-53516847.js";import"./styleUtils-327fee5c.js";import"./DictionaryLoader-85e01f74.js";import"./LRUCache-f623b6a8.js";import"./FieldsIndex-babfd5a5.js";import"./heatmapUtils-2658140c.js";import"./vec4f64-3c9d0901.js";import"./FeatureSet-5c3606d3.js";import"./Field-3600efd2.js";import"./fieldType-67bcc5fb.js";import"./mat3-5955b3db.js";import"./mat3f32-6c416b1c.js";import"./vec2f32-eaf29605.js";import"./Container-79c4018f.js";import"./parser-575e2c11.js";import"./mat4f32-60a2394b.js";import"./mat4-8067289c.js";import"./definitions-8d472612.js";import"./capabilities-b7174812.js";import"./color-e7463257.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./scaleUtils-54b03d24.js";import"./map-3b85b863.js";import"./Basemap-b930c2b7.js";import"./loadAll-c963e2dd.js";import"./PortalItem-eaf53090.js";import"./writeUtils-afcbee82.js";import"./CollectionFlattener-0ef23bca.js";import"./infoFor3D-24efd44a.js";import"./basemapUtils-144ebf6f.js";import"./TablesMixin-cecb199e.js";import"./Cyclical-69deeef6.js";import"./workers-bc069650.js";import"./TileInfo-9470b42d.js";import"./jsxFactory-93a8ddd6.js";import"./UpdatingHandles-0afdfd5b.js";import"./signal-9aac29bc.js";import"./ViewingMode-fb6259a5.js";import"./unitBezier-881ac1eb.js";import"./mat2df32-196efb0a.js";import"./vec2-525139f9.js";import"./TileStore-5e70d226.js";import"./quickselect-149a6b43.js";import"./commonjsHelpers-2f3e7994.js";import"./QuantizationParameters-0cb320a2.js";import"./TileInfoView-c4c10e27.js";import"./vec2f64-95bf678d.js";import"./normalizeUtils-c97c170d.js";import"./normalizeUtilsCommon-092672b3.js";import"./GoTo-548e14ed.js";import"./BaseGraphicContainer-7d1d86a0.js";import"./FeatureContainer-2a82270f.js";import"./AttributeStoreView-db69522e.js";import"./TiledDisplayObject-8907be27.js";import"./labelingInfo-f046f80c.js";import"./LabelClass-360f8a0a.js";import"./labelUtils-38642a07.js";import"./defaultsJSON-b087dd4d.js";import"./visualVariablesUtils-927e7922.js";import"./OptimizedFeature-ded94d90.js";import"./ExpandedCIM-ed43baeb.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-a7ae7610.js";import"./GeometryUtils-78cf27b3.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-8fbc92ac.js";import"./floatRGBA-f2d0b76d.js";import"./clusterUtils-3da19a70.js";import"./MD5-715f37cd.js";import"./util-6c29cc30.js";import"./TileContainer-3c52930c.js";import"./vec3f32-2da9db36.js";import"./ProgramTemplate-34b1be08.js";import"./normalizeUtilsSync-1a7964bc.js";import"./projectionSupport-8495a885.js";import"./json-48e3ea08.js";import"./Matcher-4d5d9536.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-dff48d62.js";import"./earcut-b84353bc.js";import"./ComputedAttributeStorage-684df5c3.js";import"./featureConversionUtils-fdf2c775.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./TimeOnly-c0fc7892.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./programUtils-d322aa7f.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-6ae10952.js";import"./basicInterfaces-11f56cb3.js";import"./testSVGPremultipliedAlpha-eb9459e4.js";import"./doublePrecisionUtils-e3c3d0d8.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl");i.getExtension("OES_texture_float"),this._rctx=new nt(i,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},o=lt("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(o.shaders.vertexShader,o.shaders.fragmentShader,o.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new st(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,o=!1){const i=T(t.extent,r),a=new k({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:s,y:p}=at(a,r,t.extent);let n=(s+p)/2;const l=Math.round((i.xmax-i.xmin)/n),u=Math.round((i.ymax-i.ymin)/n);n=(i.width/l+i.height/u)/2;const I=new k({x:n,y:n,spatialReference:i.spatialReference}),g=ot({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:I,hasWrapAround:!0,spacing:[16,16]}),w=ct(this._rctx,g),y=new j(l,u);y.wrapMode=U.CLAMP_TO_EDGE;const h=new ht(this._rctx,y);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,l,u),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(w,1),this._quad.bind();const{width:x=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",x,f),this._program.setUniform2fv("u_transformSpacing",g.spacing),this._program.setUniform2fv("u_transformGridSize",g.size),this._program.setUniform2f("u_targetImageSize",l,u),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),w.dispose(),o){const{width:c,height:V}=h,_=new ImageData(c??0,V??0);h.readPixels(0,0,c??0,V??0,pt.RGBA,mt.UNSIGNED_BYTE,_.data);const G=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:G,extent:i,imageData:_}}const b=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:b,extent:i}}reprojectBitmapData(t,r){const o=X(t.bitmapData)?Z(t.bitmapData):t.bitmapData,i=new j;i.wrapMode=U.CLAMP_TO_EDGE,i.width=t.bitmapData.width,i.height=t.bitmapData.height;const a=new dt(this._rctx,i,o),s=this.reprojectTexture({texture:a,extent:t.extent},r,!0);s.texture.dispose();const p=document.createElement("canvas"),n=s.imageData;return p.width=n.width,p.height=n.height,p.getContext("2d").putImageData(n,0,0),{bitmapData:p,extent:s.extent}}async loadAndReprojectBitmapData(t,r,o){const i=(await z(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=i.width,a.height=i.height;const s=a.getContext("2d");s.drawImage(i,0,0);const p=s.getImageData(0,0,a.width,a.height);if(r.spatialReference.equals(o))return{bitmapData:p,extent:r};const n=this.reprojectBitmapData({bitmapData:p,extent:r},o);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class q{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends et(rt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new it,this._kmlVisualData=new q,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new B}async hitTest(e,t){var o,i,a;const r=this.layer;return[(o=this._pointsView)==null?void 0:o.hitTest(e),(i=this._polylinesView)==null?void 0:i.hitTest(e),(a=this._polygonsView)==null?void 0:a.hitTest(e)].flat().filter(Boolean).map(s=>(s.layer=r,s.sourceLayer=r,{type:"graphic",graphic:s,layer:r,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),N(()=>this.layer.visibleSublayers,e=>{for(const[t,r]of this._kmlVisualData.allSublayers)r.visibility=0;for(const t of e){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=O(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=S(this._polygonsView),this._polylinesView=S(this._polylinesView),this._pointsView=S(this._pointsView),this._imageReprojector=S(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){var t,r;((t=this.view.spatialReference)!=null&&t.isWGS84||(r=this.view.spatialReference)!=null&&r.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,A.fromJSON(e.extent),this.view.spatialReference).then(o=>{const i=new tt(o.bitmapData);i.x=o.extent.xmin,i.y=o.extent.ymax,i.resolution=o.extent.width/o.bitmapData.width,i.rotation=e.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(e,i)})}async _getViewDependentUrl(e,t){const{viewFormat:r,viewBoundScale:o,httpQuery:i}=e;if(r!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let a;if(await J(),o!=null&&o!==1){const c=new A(t.extent);c.expand(o),a=c}else a=t.extent;a=T(a,$.WGS84);const s=T(a,$.WebMercator),p=a.xmin,n=a.xmax,l=a.ymin,u=a.ymax,I=t.size[0]*t.pixelRatio,g=t.size[1]*t.pixelRatio,w=Math.max(s.width,s.height),y={"[bboxWest]":p.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":l.toString(),"[bboxNorth]":u.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":w.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":w.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":I.toString(),"[vertPixels]":g.toString(),"[terrainEnabled]":"0","[clientVersion]":F,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=c=>{for(const V in c){let _;for(_ in y)c[V]=c[V].replace(_,y[_])}},x=E(r);h(x);let f={};i!=null&&(f=E(i),h(f));const b=W(e.href);return b.query={...b.query,...x,...f},`${b.path}?${H(x)}`}return e.href}async _fetchService(e){const t=new q;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,r){return this._fetchParsedKML(e,r).then(async o=>{for(const i of o.sublayers){t.allSublayers.set(i.id,i);const a=i.points?await D(i.points):[],s=i.polylines?await D(i.polylines):[],p=i.polygons?await D(i.polygons):[],n=i.mapImages||[];if(t.allPoints.push(...a.map(l=>({item:l,sublayerId:i.id}))),t.allPolylines.push(...s.map(l=>({item:l,sublayerId:i.id}))),t.allPolygons.push(...p.map(l=>({item:l,sublayerId:i.id}))),t.allMapImages.push(...n.map(l=>({item:l,sublayerId:i.id}))),i.networkLink){const l=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(l,t,r)}}})}_fetchParsedKML(e,t){return Y(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>Q(r.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};v([C()],d.prototype,"_pointsView",void 0),v([C()],d.prototype,"_polylinesView",void 0),v([C()],d.prototype,"_polygonsView",void 0),v([C()],d.prototype,"updating",void 0),d=v([K("esri.views.2d.layers.KMLLayerView2D")],d);const De=d;export{De as default};
