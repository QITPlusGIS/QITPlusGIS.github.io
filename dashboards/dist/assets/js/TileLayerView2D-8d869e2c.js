import{e as w,d as y,b as l,s as I,a as m,y as c,c as V}from"./uuid-854440a9.js";import{i as v}from"./GraphicsCollection-1f93c1d2.js";import"./Container-79c4018f.js";import"./capabilities-b7174812.js";import"./BufferPool-b06c6383.js";import"./color-e7463257.js";import"./WGLContainer-c3fd9b8d.js";import"./enums-bdecffa2.js";import"./Texture-6ea577e5.js";import"./ProgramTemplate-34b1be08.js";import"./definitions-8d472612.js";import"./GeometryUtils-78cf27b3.js";import"./FramebufferObject-aafd1353.js";import"./StyleDefinition-29c49b98.js";import"./vec2f32-eaf29605.js";import"./enums-fb086c25.js";import"./MagnifierPrograms-422c8b47.js";import"./OrderIndependentTransparency-6ae10952.js";import"./floatRGBA-f2d0b76d.js";import"./testSVGPremultipliedAlpha-eb9459e4.js";import{r as H}from"./GraphicsView2D-541ac563.js";import"./AttributeStoreView-db69522e.js";import"./earcut-b84353bc.js";import"./featureConversionUtils-fdf2c775.js";import"./lengthUtils-b6ebb268.js";import"./vec3f32-2da9db36.js";import"./normalizeUtils-c97c170d.js";import{r as T,o as g,n as f}from"./imageUtils-0c683f28.js";import{m as q,u as U}from"./LayerView-80524fa4.js";import{a as S}from"./HighlightGraphicContainer-c68ba8a8.js";import{h as b,e as d}from"./TileInfoView-c4c10e27.js";import{y as C,r as Q}from"./mat2df32-196efb0a.js";import{a as $}from"./RefreshableLayerView-81a56f3c.js";import{S as P,G as k,r as F}from"./drapedUtils-34455115.js";import"./index-2eca610e.js";import"./mat3f32-6c416b1c.js";import"./parser-575e2c11.js";import"./mat4f32-60a2394b.js";import"./mat4-8067289c.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./heatmapUtils-2658140c.js";import"./vec4f64-3c9d0901.js";import"./config-1337d16e.js";import"./vec2-525139f9.js";import"./vec2f64-95bf678d.js";import"./OptimizedFeature-ded94d90.js";import"./commonjsHelpers-2f3e7994.js";import"./ExpandedCIM-ed43baeb.js";import"./BidiEngine-9a40f2f4.js";import"./visualVariablesUtils-927e7922.js";import"./GeometryUtils-984e8446.js";import"./utils-a7ae7610.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-8fbc92ac.js";import"./rasterizingUtils-84c47778.js";import"./pbf-c0a7419b.js";import"./imageutils-e8856a5f.js";import"./Matcher-4d5d9536.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-dff48d62.js";import"./defaultsJSON-b087dd4d.js";import"./LRUCache-f623b6a8.js";import"./TileStore-5e70d226.js";import"./workers-bc069650.js";import"./signal-9aac29bc.js";import"./quickselect-149a6b43.js";import"./QuantizationParameters-0cb320a2.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-684df5c3.js";import"./FieldsIndex-babfd5a5.js";import"./TimeOnly-c0fc7892.js";import"./diffUtils-2fda0782.js";import"./UpdatingHandles-0afdfd5b.js";import"./map-3b85b863.js";import"./Basemap-b930c2b7.js";import"./loadAll-c963e2dd.js";import"./PortalItem-eaf53090.js";import"./writeUtils-afcbee82.js";import"./layerUtils-53516847.js";import"./compilerUtils-29e4db8f.js";import"./CollectionFlattener-0ef23bca.js";import"./infoFor3D-24efd44a.js";import"./basemapUtils-144ebf6f.js";import"./TablesMixin-cecb199e.js";import"./arcgisLayerUrl-db50ff50.js";import"./Cyclical-69deeef6.js";import"./TileInfo-9470b42d.js";import"./jsxFactory-93a8ddd6.js";import"./ViewingMode-fb6259a5.js";import"./unitBezier-881ac1eb.js";import"./mat3-5955b3db.js";import"./GoTo-548e14ed.js";import"./basicInterfaces-11f56cb3.js";import"./normalizeUtilsSync-1a7964bc.js";import"./normalizeUtilsCommon-092672b3.js";import"./projectionSupport-8495a885.js";import"./json-48e3ea08.js";import"./LabelClass-360f8a0a.js";import"./labelUtils-38642a07.js";import"./jsonUtils-1956249c.js";import"./TiledDisplayObject-8907be27.js";import"./labelingInfo-f046f80c.js";import"./clusterUtils-3da19a70.js";import"./MD5-715f37cd.js";import"./SizeVariable-bf59d78c.js";import"./colorRamps-2b21b939.js";import"./LegendOptions-82a1d9d3.js";import"./util-6c29cc30.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-540e42cd.js";import"./Bitmap-42146cc6.js";import"./TileContainer-3c52930c.js";import"./scaleUtils-54b03d24.js";import"./BaseGraphicContainer-7d1d86a0.js";import"./FeatureContainer-2a82270f.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-559d4691.js";import"./popupUtils-ce21ae10.js";const G=[0,0];let o=class extends $(T(q(U))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new v,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new b(this.layer.tileInfo,this.layer.fullExtent,i==null?void 0:i.effectiveMinLOD,i==null?void 0:i.effectiveMaxLOD),this._fetchQueue=new C({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,r)=>this.fetchTile(e,r)}),this._tileStrategy=new Q({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),P(this,this.layer)){const e=this._highlightView=new H({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new S(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(r,p)=>F(r,p,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,p)=>{e.graphicUpdateHandler({graphic:r,property:p})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,i;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(i=this._highlightView)==null||i.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):w()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return y((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(G,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e=this.tilemapCache,{signal:r,resamplingLevel:p=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(h){if(!l(h)&&!this.resampling)return g(this._tileInfoView.tileInfo.size);if(p<3){const n=this._tileInfoView.getTileParentId(t.id);if(n){const u=new d(n),_=await this.fetchTile(u,{...i,resamplingLevel:p+1});return f(this._tileInfoView,_,u,t)}}throw h}const s=new d(0,0,0,0);let a;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,s,{signal:r}),s.level!==t.level&&!this.resampling)return g(this._tileInfoView.tileInfo.size);a=await this._fetchImage(s,r)}catch(h){if(l(h))throw h;a=await this._fetchImage(t,r)}return this.resampling?f(this._tileInfoView,a,s,t):a}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){l(i)||I.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};m([c()],o.prototype,"resampling",null),m([c()],o.prototype,"tilemapCache",null),o=m([V("esri.views.2d.layers.TileLayerView2D")],o);const Ki=o;export{Ki as default};
