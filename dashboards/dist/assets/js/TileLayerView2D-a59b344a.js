import{e as w,d as y,b as l,s as I,a as m,y as c,c as V}from"./uuid-11f8a774.js";import{i as v}from"./GraphicsCollection-4a6a6bbf.js";import"./Container-c1db96c2.js";import"./capabilities-c523e723.js";import"./BufferPool-f887fdf4.js";import"./color-32a3c8c6.js";import"./WGLContainer-c9b60762.js";import"./enums-bdecffa2.js";import"./Texture-2cfb434c.js";import"./ProgramTemplate-112d69b6.js";import"./definitions-8354b929.js";import"./GeometryUtils-9172a54e.js";import"./FramebufferObject-276d0d17.js";import"./StyleDefinition-29c49b98.js";import"./vec2f32-eaf29605.js";import"./enums-fb086c25.js";import"./MagnifierPrograms-9ed38e70.js";import"./OrderIndependentTransparency-6ae10952.js";import"./floatRGBA-675f6b2f.js";import"./testSVGPremultipliedAlpha-2051dd50.js";import{r as H}from"./GraphicsView2D-ffc945d4.js";import"./AttributeStoreView-43a7d5d5.js";import"./earcut-b84353bc.js";import"./featureConversionUtils-7017a7c2.js";import"./lengthUtils-782f0f7c.js";import"./vec3f32-2da9db36.js";import"./normalizeUtils-b40b80d9.js";import{r as T,o as g,n as f}from"./imageUtils-1654b083.js";import{m as q,u as U}from"./LayerView-5b88715e.js";import{a as S}from"./HighlightGraphicContainer-40faa2e1.js";import{h as b,e as d}from"./TileInfoView-3c33d57f.js";import{y as C,r as Q}from"./mat2df32-f849f6ea.js";import{a as $}from"./RefreshableLayerView-3d9d158a.js";import{S as P,G as k,r as F}from"./drapedUtils-008cab95.js";import"./index-9591f551.js";import"./mat3f32-6c416b1c.js";import"./parser-e8657b5e.js";import"./mat4f32-60a2394b.js";import"./mat4-a716043f.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./heatmapUtils-f451477b.js";import"./vec4f64-3c9d0901.js";import"./config-1337d16e.js";import"./vec2-178908bd.js";import"./vec2f64-95bf678d.js";import"./OptimizedFeature-ded94d90.js";import"./commonjsHelpers-2f3e7994.js";import"./ExpandedCIM-591d00a6.js";import"./BidiEngine-9a40f2f4.js";import"./visualVariablesUtils-1775d26c.js";import"./GeometryUtils-984e8446.js";import"./utils-5680966d.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-03ec5df7.js";import"./rasterizingUtils-a92d07c6.js";import"./pbf-8e0dfe4d.js";import"./imageutils-d5be5874.js";import"./Matcher-d2c49178.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-eb1bedf9.js";import"./defaultsJSON-b087dd4d.js";import"./LRUCache-7a50638a.js";import"./TileStore-488f52a1.js";import"./workers-194c6572.js";import"./signal-9889a3e2.js";import"./quickselect-149a6b43.js";import"./QuantizationParameters-047a8fb0.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-083b8a1d.js";import"./FieldsIndex-c32201a6.js";import"./TimeOnly-b98745da.js";import"./diffUtils-0fe85298.js";import"./UpdatingHandles-453b6cae.js";import"./map-beb54af9.js";import"./Basemap-e835b2ff.js";import"./loadAll-ed668eae.js";import"./PortalItem-6e04dd29.js";import"./writeUtils-08445a52.js";import"./layerUtils-c5e7bd79.js";import"./compilerUtils-4589e991.js";import"./CollectionFlattener-3b7ee789.js";import"./infoFor3D-24efd44a.js";import"./basemapUtils-1bb3cee3.js";import"./TablesMixin-abbae55c.js";import"./arcgisLayerUrl-f89b3daf.js";import"./Cyclical-3ead80f1.js";import"./TileInfo-0752eafb.js";import"./jsxFactory-3225406e.js";import"./ViewingMode-fb6259a5.js";import"./unitBezier-881ac1eb.js";import"./mat3-03bcfe6d.js";import"./GoTo-576c62ef.js";import"./basicInterfaces-11f56cb3.js";import"./normalizeUtilsSync-ace05f0c.js";import"./normalizeUtilsCommon-44f2a7f8.js";import"./projectionSupport-f9cfd22c.js";import"./json-48e3ea08.js";import"./LabelClass-e2fd4294.js";import"./labelUtils-64d01ef0.js";import"./jsonUtils-e8038208.js";import"./TiledDisplayObject-f5b89487.js";import"./labelingInfo-efefa770.js";import"./clusterUtils-34ff746f.js";import"./MD5-715f37cd.js";import"./SizeVariable-45541787.js";import"./colorRamps-1b6e24dc.js";import"./LegendOptions-204a2dae.js";import"./util-a938c846.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-d68785af.js";import"./Bitmap-7421f3d6.js";import"./TileContainer-5567e24f.js";import"./scaleUtils-3367fb97.js";import"./BaseGraphicContainer-0f8a82a4.js";import"./FeatureContainer-c08ab301.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-e9dff2a3.js";import"./popupUtils-9368255f.js";const G=[0,0];let o=class extends $(T(q(U))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new v,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new b(this.layer.tileInfo,this.layer.fullExtent,i==null?void 0:i.effectiveMinLOD,i==null?void 0:i.effectiveMaxLOD),this._fetchQueue=new C({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,r)=>this.fetchTile(e,r)}),this._tileStrategy=new Q({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),P(this,this.layer)){const e=this._highlightView=new H({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new S(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(r,p)=>F(r,p,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,p)=>{e.graphicUpdateHandler({graphic:r,property:p})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,i;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(i=this._highlightView)==null||i.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):w()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return y((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(G,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e=this.tilemapCache,{signal:r,resamplingLevel:p=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(h){if(!l(h)&&!this.resampling)return g(this._tileInfoView.tileInfo.size);if(p<3){const n=this._tileInfoView.getTileParentId(t.id);if(n){const u=new d(n),_=await this.fetchTile(u,{...i,resamplingLevel:p+1});return f(this._tileInfoView,_,u,t)}}throw h}const s=new d(0,0,0,0);let a;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,s,{signal:r}),s.level!==t.level&&!this.resampling)return g(this._tileInfoView.tileInfo.size);a=await this._fetchImage(s,r)}catch(h){if(l(h))throw h;a=await this._fetchImage(t,r)}return this.resampling?f(this._tileInfoView,a,s,t):a}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){l(i)||I.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};m([c()],o.prototype,"resampling",null),m([c()],o.prototype,"tilemapCache",null),o=m([V("esri.views.2d.layers.TileLayerView2D")],o);const Ki=o;export{Ki as default};
