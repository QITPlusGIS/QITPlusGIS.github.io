import{a as i,y as s,c as C,cJ as P,cG as B,cI as L,cY as F,M as h,V as w,q as N,bv as M,cZ as J,c_ as I,c$ as $,g as k,o as z,ah as A,d as U,a5 as T,S as f,T as W,R as Z,d0 as D}from"./uuid-8543c34e.js";import{m as q}from"./MultiOriginJSONSupport-0b650e25.js";import{U as S,D as H,E as K,_ as V,b as Y,a as Q}from"./arcgisLayerUrl-ec2f2135.js";import{R as X}from"./normalizeUtils-dd0d9796.js";import{Z as ee}from"./FeatureLayer-45a1e5d9.js";import{h as te}from"./GraphicsLayer-cabf523f.js";import{n as re}from"./objectIdUtils-789e911a.js";import{a as oe}from"./BlendLayer-69a06cfc.js";import{u as ie}from"./OperationalLayer-16bd961b.js";import{j as le}from"./PortalLayer-1236c832.js";import{t as ae}from"./ScaleRangeLayer-8e351e9d.js";import{y as R}from"./Field-d39fc769.js";import"./index-71f6c0ac.js";import"./normalizeUtilsCommon-1d284c7d.js";import"./UniqueValueRenderer-5377a072.js";import"./LegendOptions-5787bf37.js";import"./diffUtils-2f40bb41.js";import"./SizeVariable-569fefc3.js";import"./colorRamps-6df6d6f7.js";import"./compilerUtils-b6fccf25.js";import"./lengthUtils-7e41a327.js";import"./ColorStop-d7d9c239.js";import"./jsonUtils-f5725ae9.js";import"./layerUtils-60bab848.js";import"./styleUtils-94d35cb4.js";import"./jsonUtils-cd25f8ce.js";import"./DictionaryLoader-77016f21.js";import"./LRUCache-20778572.js";import"./FieldsIndex-8f568a88.js";import"./heatmapUtils-7f7225e7.js";import"./vec4f64-3c9d0901.js";import"./commonProperties-33a2de5d.js";import"./ElevationInfo-4de725df.js";import"./FeatureLayerBase-cb3d46a4.js";import"./featureLayerUtils-2be9b25e.js";import"./Query-6436d464.js";import"./FullTextSearch-aa688208.js";import"./QuantizationParameters-5bcf1f9a.js";import"./AttachmentQuery-89503620.js";import"./RelationshipQuery-0ef80766.js";import"./fieldType-2c1216fb.js";import"./LayerFloorInfo-9ed56392.js";import"./serviceCapabilitiesUtils-2125f780.js";import"./workers-d869425a.js";import"./queryZScale-f627fdd4.js";import"./FeatureSet-5aedb17a.js";import"./APIKeyMixin-96e5d80c.js";import"./ArcGISService-5ec94bea.js";import"./CustomParametersMixin-81ca532a.js";import"./EditBusLayer-3dfa86b4.js";import"./FeatureEffectLayer-3d594b7a.js";import"./FeatureEffect-8c4188ef.js";import"./jsonUtils-7a48f99d.js";import"./parser-01d0d370.js";import"./mat4f32-60a2394b.js";import"./mat4-f427906c.js";import"./FeatureReductionLayer-1cdc1e17.js";import"./clusterUtils-51d649eb.js";import"./MD5-715f37cd.js";import"./FeatureReductionSelection-6f98c66b.js";import"./LabelClass-766d0bd7.js";import"./labelUtils-308d1e86.js";import"./defaultsJSON-b087dd4d.js";import"./OrderedLayer-018bff96.js";import"./RefreshableLayer-3d275e6c.js";import"./TemporalLayer-d7a5502b.js";import"./FeatureTemplate-6db887d6.js";import"./FeatureType-dede8b35.js";import"./fieldProperties-3c3ce4a7.js";import"./labelingInfo-cc2f73a7.js";import"./versionUtils-a63f1dc6.js";import"./styleUtils-a62a4cab.js";import"./TopFeaturesQuery-5f508c79.js";import"./popupUtils-49cf1e32.js";import"./interfaces-f1f22245.js";import"./GraphicsCollection-86205b66.js";import"./PortalItem-40a43a90.js";import"./portalItemUtils-cfa001ef.js";function b(t){return t.featureCollectionType==="markup"||t.layers.some(e=>e.layerDefinition.visibilityField!=null||!E(e))}function E({layerDefinition:t,featureSet:e}){const r=t.geometryType??e.geometryType;return v.find(o=>{var l,n,p;return r===o.geometryTypeJSON&&((p=(n=(l=t.drawingInfo)==null?void 0:l.renderer)==null?void 0:n.symbol)==null?void 0:p.type)===o.identifyingSymbol.type})}function _(){return new Z({xmin:-180,ymin:-90,xmax:180,ymax:90})}const x=new R({name:"OBJECTID",alias:"OBJECTID",type:"oid",nullable:!1,editable:!1}),ne=new R({name:"title",alias:"Title",type:"string",nullable:!0,editable:!0,length:255});let m=class extends te{constructor(t){super(t),this.visibilityMode="inherited"}initialize(){for(const t of this.graphics)t.sourceLayer=this.layer;this.graphics.on("after-add",t=>{t.item.sourceLayer=this.layer}),this.graphics.on("after-remove",t=>{t.item.sourceLayer=null})}get fullExtent(){var r;const t=(r=this.layer)==null?void 0:r.spatialReference,e=this.fullBounds;return t?e==null?S(_(),t).geometry:$(e,t):null}get fullBounds(){var r;const t=(r=this.layer)==null?void 0:r.spatialReference;if(!t)return null;const e=M();return this.graphics.forEach(o=>{const l=o.geometry!=null?S(o.geometry,t).geometry:null;l!=null&&J(e,l.type==="point"?l:l.extent,e)}),I(e,D)?null:e}get sublayers(){return this.graphics}};i([s({readOnly:!0})],m.prototype,"fullExtent",null),i([s({readOnly:!0})],m.prototype,"fullBounds",null),i([s({readOnly:!0})],m.prototype,"sublayers",null),i([s()],m.prototype,"layer",void 0),i([s()],m.prototype,"layerId",void 0),i([s({readOnly:!0})],m.prototype,"visibilityMode",void 0),m=i([C("esri.layers.MapNotesLayer.MapNotesSublayer")],m);const v=[{geometryType:"polygon",geometryTypeJSON:"esriGeometryPolygon",id:"polygonLayer",layerId:0,title:"Polygons",identifyingSymbol:new P().toJSON()},{geometryType:"polyline",geometryTypeJSON:"esriGeometryPolyline",id:"polylineLayer",layerId:1,title:"Polylines",identifyingSymbol:new B().toJSON()},{geometryType:"multipoint",geometryTypeJSON:"esriGeometryMultipoint",id:"multipointLayer",layerId:2,title:"Multipoints",identifyingSymbol:new L().toJSON()},{geometryType:"point",geometryTypeJSON:"esriGeometryPoint",id:"pointLayer",layerId:3,title:"Points",identifyingSymbol:new L().toJSON()},{geometryType:"point",geometryTypeJSON:"esriGeometryPoint",id:"textLayer",layerId:4,title:"Text",identifyingSymbol:new F().toJSON()}];let a=class extends oe(ae(ie(le(q(Q))))){constructor(t){super(t),this.capabilities={operations:{supportsMapNotesEditing:!0}},this.featureCollections=null,this.featureCollectionJSON=null,this.featureCollectionType="notes",this.legendEnabled=!1,this.listMode="hide-children",this.minScale=0,this.maxScale=0,this.spatialReference=h.WGS84,this.sublayers=new w(v.map(e=>new m({id:e.id,layerId:e.layerId,title:e.title,layer:this}))),this.title="Map Notes",this.type="map-notes",this.visibilityMode="inherited"}readCapabilities(t,e,r){return{operations:{supportsMapNotesEditing:!b(e)&&(r==null?void 0:r.origin)!=="portal-item"}}}readFeatureCollections(t,e,r){if(!b(e))return null;const o=e.layers.map(l=>{const n=new ee;return n.read(l,r),n});return new w({items:o})}readLegacyfeatureCollectionJSON(t,e){return b(e)?N(e.featureCollection):null}get fullExtent(){var r;const t=this.spatialReference,e=M();return this.sublayers!=null?this.sublayers.forEach(({fullBounds:o})=>o!=null?J(e,o,e):e,e):(r=this.featureCollectionJSON)!=null&&r.layers.some(o=>o.layerDefinition.extent)&&this.featureCollectionJSON.layers.forEach(o=>{const l=S(o.layerDefinition.extent,t).geometry;l!=null&&J(e,l,e)}),I(e,D)?S(_(),t).geometry:$(e,t)}readMinScale(t,e){for(const r of e.layers)if(r.layerDefinition.minScale!=null)return r.layerDefinition.minScale;return 0}readMaxScale(t,e){for(const r of e.layers)if(r.layerDefinition.maxScale!=null)return r.layerDefinition.maxScale;return 0}get multipointLayer(){return this._findSublayer("multipointLayer")}get pointLayer(){return this._findSublayer("pointLayer")}get polygonLayer(){return this._findSublayer("polygonLayer")}get polylineLayer(){return this._findSublayer("polylineLayer")}readSpatialReference(t,e){return e.layers.length?h.fromJSON(e.layers[0].layerDefinition.spatialReference):h.WGS84}readSublayers(t,e,r){if(b(e))return null;const o=[];let l=e.layers.reduce((n,p)=>Math.max(n,p.layerDefinition.id??-1),-1)+1;for(const n of e.layers){const{layerDefinition:p,featureSet:y}=n,u=p.id??l++,d=E(n);if(d!=null){const c=new m({id:d.id,title:p.name,layerId:u,layer:this,graphics:y.features.map(({geometry:g,symbol:O,attributes:j,popupInfo:G})=>k.fromJSON({attributes:j,geometry:g,symbol:O,popupTemplate:G}))});o.push(c)}}return new w(o)}writeSublayers(t,e,r,o){var d;const{minScale:l,maxScale:n}=this;if(t==null)return;const p=t.some(c=>c.graphics.length>0);if(!this.capabilities.operations.supportsMapNotesEditing)return void(p&&((d=o==null?void 0:o.messages)==null?void 0:d.push(new z("map-notes-layer:editing-not-supported","New map notes cannot be added to this layer"))));const y=[];let u=this.spatialReference.toJSON();e:for(const c of t)for(const g of c.graphics)if(g.geometry!=null){u=g.geometry.spatialReference.toJSON();break e}for(const c of v){const g=t.find(O=>c.id===O.id);this._writeMapNoteSublayer(y,g,c,l,n,u,o)}A("featureCollection.layers",y,e)}get textLayer(){return this._findSublayer("textLayer")}load(t){return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Feature Collection"]},t)),Promise.resolve(this)}read(t,e){"featureCollection"in t&&(t=N(t),Object.assign(t,t.featureCollection)),super.read(t,e)}async beforeSave(){if(this.sublayers==null)return;let t=null;const e=[];for(const o of this.sublayers)for(const l of o.graphics)if(l.geometry!=null){const n=l.geometry;t?U(n.spatialReference,t)||(H(n.spatialReference,t)||K()||await V(),l.geometry=Y(n,t)):t=n.spatialReference,e.push(l)}const r=await X(e.map(o=>o.geometry));e.forEach((o,l)=>o.geometry=r[l])}_findSublayer(t){var e;return this.sublayers==null?null:((e=this.sublayers)==null?void 0:e.find(r=>r.id===t))??null}_writeMapNoteSublayer(t,e,r,o,l,n,p){const y=[];if(e!=null){for(const u of e.graphics)this._writeMapNote(y,u,r.geometryType,p);this._normalizeObjectIds(y,x),t.push({layerDefinition:{name:e.title,drawingInfo:{renderer:{type:"simple",symbol:N(r.identifyingSymbol)}},id:e.layerId,geometryType:r.geometryTypeJSON,minScale:o,maxScale:l,objectIdField:"OBJECTID",fields:[x.toJSON(),ne.toJSON()],spatialReference:n},featureSet:{features:y,geometryType:r.geometryTypeJSON}})}}_writeMapNote(t,e,r,o){var u,d;if(e==null)return;const{geometry:l,symbol:n,popupTemplate:p}=e;if(l==null)return;if(l.type!==r)return void((u=o==null?void 0:o.messages)==null?void 0:u.push(new T("map-notes-layer:invalid-geometry-type",`Geometry "${l.type}" cannot be saved in "${r}" layer`,{graphic:e})));if(n==null)return void((d=o==null?void 0:o.messages)==null?void 0:d.push(new T("map-notes-layer:no-symbol","Skipping map notes with no symbol",{graphic:e})));const y={attributes:{...e.attributes},geometry:l.toJSON(),symbol:n.toJSON()};p!=null&&(y.popupInfo=p.toJSON()),t.push(y)}_normalizeObjectIds(t,e){const r=e.name;let o=re(r,t)+1;const l=new Set;for(const n of t){n.attributes||(n.attributes={});const{attributes:p}=n;(p[r]==null||l.has(p[r]))&&(p[r]=o++),l.add(p[r])}}};i([s({readOnly:!0})],a.prototype,"capabilities",void 0),i([f(["portal-item","web-map"],"capabilities",["layers"])],a.prototype,"readCapabilities",null),i([s({readOnly:!0})],a.prototype,"featureCollections",void 0),i([f(["web-map","portal-item"],"featureCollections",["layers"])],a.prototype,"readFeatureCollections",null),i([s({readOnly:!0,json:{origins:{"web-map":{write:{enabled:!0,target:"featureCollection"}}}}})],a.prototype,"featureCollectionJSON",void 0),i([f(["web-map","portal-item"],"featureCollectionJSON",["featureCollection"])],a.prototype,"readLegacyfeatureCollectionJSON",null),i([s({readOnly:!0,json:{read:!0,write:{enabled:!0,ignoreOrigin:!0}}})],a.prototype,"featureCollectionType",void 0),i([s({readOnly:!0})],a.prototype,"fullExtent",null),i([s({readOnly:!0,json:{origins:{"web-map":{write:{target:"featureCollection.showLegend",overridePolicy(){return{enabled:this.featureCollectionJSON!=null}}}}}}})],a.prototype,"legendEnabled",void 0),i([s({type:["show","hide","hide-children"]})],a.prototype,"listMode",void 0),i([s({type:Number,nonNullable:!0,json:{write:!1}})],a.prototype,"minScale",void 0),i([f(["web-map","portal-item"],"minScale",["layers"])],a.prototype,"readMinScale",null),i([s({type:Number,nonNullable:!0,json:{write:!1}})],a.prototype,"maxScale",void 0),i([f(["web-map","portal-item"],"maxScale",["layers"])],a.prototype,"readMaxScale",null),i([s({readOnly:!0})],a.prototype,"multipointLayer",null),i([s({value:"ArcGISFeatureLayer",type:["ArcGISFeatureLayer"]})],a.prototype,"operationalLayerType",void 0),i([s({readOnly:!0})],a.prototype,"pointLayer",null),i([s({readOnly:!0})],a.prototype,"polygonLayer",null),i([s({readOnly:!0})],a.prototype,"polylineLayer",null),i([s({type:h})],a.prototype,"spatialReference",void 0),i([f(["web-map","portal-item"],"spatialReference",["layers"])],a.prototype,"readSpatialReference",null),i([s({readOnly:!0,json:{origins:{"web-map":{write:{ignoreOrigin:!0}}}}})],a.prototype,"sublayers",void 0),i([f("web-map","sublayers",["layers"])],a.prototype,"readSublayers",null),i([W("web-map","sublayers")],a.prototype,"writeSublayers",null),i([s({readOnly:!0})],a.prototype,"textLayer",null),i([s()],a.prototype,"title",void 0),i([s({readOnly:!0,json:{read:!1}})],a.prototype,"type",void 0),a=i([C("esri.layers.MapNotesLayer")],a);const Dt=a;export{Dt as default};
