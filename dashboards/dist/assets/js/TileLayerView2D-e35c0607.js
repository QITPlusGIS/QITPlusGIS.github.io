import{b as w,c as y,y as I,d as V,e as v,j as H,m as o,n as m,q as T,t as n,v as g,w as q}from"./index-709d080c.js";import"./Container-a559bf1c.js";import"./BufferPool-4fcc93dd.js";import"./color-906689d6.js";import"./WGLContainer-1a8b1ee3.js";import"./Texture-10a5939e.js";import"./ProgramTemplate-1082d575.js";import"./GeometryUtils-58fd4c09.js";import"./FramebufferObject-3b96e2fc.js";import"./MagnifierPrograms-3735b5a4.js";import"./OrderIndependentTransparency-35895022.js";import"./floatRGBA-028de362.js";import"./testSVGPremultipliedAlpha-2956a66d.js";import{r as U}from"./GraphicsView2D-94092b25.js";import"./AttributeStoreView-e38d3215.js";import"./earcut-542fe939.js";import"./vec3f32-2da9db36.js";import{r as b,o as f,n as d}from"./imageUtils-270fc56a.js";import{m as S,u as C}from"./LayerView-6553e034.js";import{a as Q}from"./HighlightGraphicContainer-6d442184.js";import{a as $}from"./RefreshableLayerView-d347ebd1.js";import{S as P,G as k,r as F}from"./drapedUtils-4c0d1a39.js";import"./config-1337d16e.js";import"./ExpandedCIM-ef671ba0.js";import"./BidiEngine-9a40f2f4.js";import"./visualVariablesUtils-3c4fa38c.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-0cd11aba.js";import"./rasterizingUtils-7585f933.js";import"./imageutils-8f82f3c0.js";import"./Matcher-b851c754.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-845960ce.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-b467c3de.js";import"./TimeOnly-94cbed0e.js";import"./basicInterfaces-11f56cb3.js";import"./normalizeUtilsSync-6a6170eb.js";import"./projectionSupport-1063052c.js";import"./json-48e3ea08.js";import"./TiledDisplayObject-ae6319e7.js";import"./util-de83a503.js";import"./BitmapTileContainer-096983ed.js";import"./Bitmap-3af22730.js";import"./TileContainer-c80bebf8.js";import"./scaleUtils-139fb2fb.js";import"./BaseGraphicContainer-dc6c6339.js";import"./FeatureContainer-6bd1f2a0.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-56268c12.js";import"./popupUtils-bf474c38.js";const G=[0,0];let a=class extends $(b(S(C))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e==null?void 0:e.effectiveMinLOD,e==null?void 0:e.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,h)=>this.fetchTile(i,h)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),P(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new Q(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(h,r)=>F(h,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(h,r)=>{i.graphicUpdateHandler({graphic:h,property:r})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(e=this._highlightView)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):v()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return H((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(G,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:h,resamplingLevel:r=0}=e;if(!i)try{return await this._fetchImage(t,h)}catch(s){if(!o(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(r<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const c=new m(u),_=await this.fetchTile(c,{...e,resamplingLevel:r+1});return d(this._tileInfoView,_,c,t)}}throw s}const l=new m(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,l,{signal:h}),l.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,h)}catch(s){if(o(s))throw s;p=await this._fetchImage(t,h)}return this.resampling?d(this._tileInfoView,p,l,t):p}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){o(e)||T.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};n([g()],a.prototype,"resampling",null),n([g()],a.prototype,"tilemapCache",null),a=n([q("esri.views.2d.layers.TileLayerView2D")],a);const Ft=a;export{Ft as default};
