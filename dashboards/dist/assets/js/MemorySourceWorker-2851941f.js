import{o as I,b_ as Q,as as Z,at as A,c0 as b,bZ as S,aB as v}from"./uuid-11f8a774.js";import{e as w,n as k,t as C}from"./featureConversionUtils-7017a7c2.js";import{t as P,n as G}from"./objectIdUtils-789e911a.js";import{m as $}from"./FeatureStore-ce070533.js";import{x as E,j as _}from"./projectionSupport-f9cfd22c.js";import{W as L}from"./QueryEngine-fe1222a3.js";import{i as W,o as z,a as B}from"./clientSideDefaults-842d3990.js";import{I as N,f as g,p as T,d as j,w as O}from"./sourceUtils-8179d432.js";import{c as D}from"./FieldsIndex-c32201a6.js";import{i as H}from"./fieldType-322546e5.js";import"./index-9591f551.js";import"./OptimizedFeature-ded94d90.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BoundsStore-52b9debe.js";import"./PooledRBush-8262b41b.js";import"./quickselect-149a6b43.js";import"./commonjsHelpers-2f3e7994.js";import"./timeSupport-76a43527.js";import"./arcgisLayerUrl-f89b3daf.js";import"./normalizeUtils-b40b80d9.js";import"./normalizeUtilsCommon-44f2a7f8.js";import"./json-48e3ea08.js";import"./LRUCache-7a50638a.js";import"./WhereClause-22a2bf5e.js";import"./TimeOnly-b98745da.js";import"./QueryEngineCapabilities-85c4f1d0.js";import"./quantizationUtils-03ec5df7.js";import"./utils-dd7ee34d.js";import"./heatmapUtils-f451477b.js";import"./vec4f64-3c9d0901.js";import"./utils-de0578e9.js";import"./basemapUtils-1bb3cee3.js";import"./Basemap-e835b2ff.js";import"./loadAll-ed668eae.js";import"./PortalItem-6e04dd29.js";import"./writeUtils-08445a52.js";import"./layerUtils-c5e7bd79.js";import"./mat4f32-60a2394b.js";import"./mat4-a716043f.js";import"./generateRendererUtils-63a86569.js";import"./signal-9889a3e2.js";import"./RenderState-1d6218ee.js";import"./defaultsJSON-b087dd4d.js";import"./date-d60e9730.js";const U=S,J={xmin:-180,ymin:-90,xmax:180,ymax:90,spatialReference:S},K={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};function V(h){return v(h)?h.z!=null:!!h.hasZ}function X(h){return v(h)?h.m!=null:!!h.hasM}class We{constructor(){this._queryEngine=null,this._nextObjectId=null}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e){const i=[],{features:a}=e,s=this._inferLayerProperties(a,e.fields),l=e.fields||[],u=e.hasM!=null?e.hasM:!!s.hasM,f=e.hasZ!=null?e.hasZ:!!s.hasZ,p=!e.spatialReference&&!s.spatialReference,d=p?U:e.spatialReference||s.spatialReference,y=p?J:null,m=e.geometryType||s.geometryType,o=!m;let t=e.objectIdField||s.objectIdField,n=e.timeInfo;const c=new D(l);if(!o&&(p&&i.push({name:"feature-layer:spatial-reference-not-found",message:"Spatial reference not provided or found in features. Defaults to WGS84"}),!m))throw new I("feature-layer:missing-property","geometryType not set and couldn't be inferred from the provided features");if(!t)throw new I("feature-layer:missing-property","objectIdField not set and couldn't be found in the provided fields");if(s.objectIdField&&t!==s.objectIdField&&(i.push({name:"feature-layer:duplicated-oid-field",message:`Provided objectIdField "${t}" doesn't match the field name "${s.objectIdField}", found in the provided fields`}),t=s.objectIdField),t&&!s.objectIdField){const r=c.get(t);r?(t=r.name,r.type="esriFieldTypeOID",r.editable=!1,r.nullable=!1):l.unshift({alias:t,name:t,type:"esriFieldTypeOID",editable:!1,nullable:!1})}for(const r of l){if(r.name==null&&(r.name=r.alias),r.alias==null&&(r.alias=r.name),!r.name)throw new I("feature-layer:invalid-field-name","field name is missing",{field:r});if(r.name===t&&(r.type="esriFieldTypeOID"),!H.jsonValues.includes(r.type))throw new I("feature-layer:invalid-field-type",`invalid type for field "${r.name}"`,{field:r});r.length==null&&(r.length=Q(r))}const F={};for(const r of l)if(r.type!=="esriFieldTypeOID"&&r.type!=="esriFieldTypeGlobalID"){const q=Z(r);q!==void 0&&(F[r.name]=q)}if(n){if(n.startTimeField){const r=c.get(n.startTimeField);r?(n.startTimeField=r.name,r.type="esriFieldTypeDate"):n.startTimeField=null}if(n.endTimeField){const r=c.get(n.endTimeField);r?(n.endTimeField=r.name,r.type="esriFieldTypeDate"):n.endTimeField=null}if(n.trackIdField){const r=c.get(n.trackIdField);r?n.trackIdField=r.name:(n.trackIdField=null,i.push({name:"feature-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:n}}))}n.startTimeField||n.endTimeField||(i.push({name:"feature-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing or invalid",details:{timeInfo:n}}),n=null)}const x=c.dateFields.length?{timeZoneIANA:e.dateFieldsTimeZone??A}:null;this._createDefaultAttributes=W(F,t);const R={warnings:i,featureErrors:[],layerDefinition:{...K,drawingInfo:z(m),templates:B(F),extent:y,geometryType:m,objectIdField:t,fields:l,hasZ:f,hasM:u,timeInfo:n,dateFieldsTimeReference:x},assignedObjectIds:{}};if(this._queryEngine=new L({fieldsIndex:D.fromLayerJSON({fields:l,timeInfo:n,dateFieldsTimeReference:x}),geometryType:m,hasM:u,hasZ:f,objectIdField:t,spatialReference:d,featureStore:new $({geometryType:m,hasM:u,hasZ:f}),timeInfo:n,cacheSpatialQueries:!0}),!(a!=null&&a.length))return this._nextObjectId=P,R;const M=G(t,a);return this._nextObjectId=M+1,await E(a,d),this._loadInitialFeatures(R,a)}async applyEdits(e){const{spatialReference:i,geometryType:a}=this._queryEngine;return await Promise.all([N(i,a),E(e.adds,i),E(e.updates,i)]),this._applyEdits(e)}queryFeatures(e,i={}){return this._queryEngine.executeQuery(e,i.signal)}queryFeatureCount(e,i={}){return this._queryEngine.executeQueryForCount(e,i.signal)}queryObjectIds(e,i={}){return this._queryEngine.executeQueryForIds(e,i.signal)}queryExtent(e,i={}){return this._queryEngine.executeQueryForExtent(e,i.signal)}querySnapping(e,i={}){return this._queryEngine.executeQueryForSnapping(e,i.signal)}_inferLayerProperties(e,i){let a,s,l=null,u=null,f=null;for(const p of e){const d=p.geometry;if(d!=null&&(l||(l=b(d)),u||(u=d.spatialReference),a==null&&(a=V(d)),s==null&&(s=X(d)),l&&u&&a!=null&&s!=null))break}if(i&&i.length){let p=null;i.some(d=>{const y=d.type==="esriFieldTypeOID",m=!d.type&&d.name&&d.name.toLowerCase()==="objectid";return p=d,y||m})&&(f=p.name)}return{geometryType:l,spatialReference:u,objectIdField:f,hasM:s,hasZ:a}}async _loadInitialFeatures(e,i){const{geometryType:a,hasM:s,hasZ:l,objectIdField:u,spatialReference:f,featureStore:p,fieldsIndex:d}=this._queryEngine,y=[];for(const t of i){if(t.uid!=null&&(e.assignedObjectIds[t.uid]=-1),t.geometry&&a!==b(t.geometry)){e.featureErrors.push(g("Incorrect geometry type."));continue}const n=this._createDefaultAttributes(),c=T(d,n,t.attributes,!0);c?e.featureErrors.push(c):(this._assignObjectId(n,t.attributes,!0),t.attributes=n,t.uid!=null&&(e.assignedObjectIds[t.uid]=t.attributes[u]),t.geometry!=null&&(t.geometry=_(t.geometry,t.geometry.spatialReference,f)),y.push(t))}p.addMany(w([],y,a,l,s,u));const{fullExtent:m,timeExtent:o}=await this._queryEngine.fetchRecomputedExtents();if(e.layerDefinition.extent=m,o){const{start:t,end:n}=o;e.layerDefinition.timeInfo.timeExtent=[t,n]}return e}async _applyEdits(e){const{adds:i,updates:a,deletes:s}=e,l={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(i!=null&&i.length&&this._applyAddEdits(l,i),a!=null&&a.length&&this._applyUpdateEdits(l,a),s==null?void 0:s.length){for(const p of s)l.deleteResults.push(j(p));this._queryEngine.featureStore.removeManyById(s)}const{fullExtent:u,timeExtent:f}=await this._queryEngine.fetchRecomputedExtents();return{extent:u,timeExtent:f,featureEditResults:l}}_applyAddEdits(e,i){const{addResults:a}=e,{geometryType:s,hasM:l,hasZ:u,objectIdField:f,spatialReference:p,featureStore:d,fieldsIndex:y}=this._queryEngine,m=[];for(const o of i){if(o.geometry&&s!==b(o.geometry)){a.push(g("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),n=T(y,t,o.attributes);if(n)a.push(n);else{if(this._assignObjectId(t,o.attributes),o.attributes=t,o.uid!=null){const c=o.attributes[f];e.uidToObjectId[o.uid]=c}if(o.geometry!=null){const c=o.geometry.spatialReference??p;o.geometry=_(O(o.geometry,c),c,p)}m.push(o),a.push(j(o.attributes[f]))}}d.addMany(w([],m,s,u,l,f))}_applyUpdateEdits({updateResults:e},i){const{geometryType:a,hasM:s,hasZ:l,objectIdField:u,spatialReference:f,featureStore:p,fieldsIndex:d}=this._queryEngine;for(const y of i){const{attributes:m,geometry:o}=y,t=m==null?void 0:m[u];if(t==null){e.push(g(`Identifier field ${u} missing`));continue}if(!p.has(t)){e.push(g(`Feature with object id ${t} missing`));continue}const n=k(p.getFeature(t),a,l,s);if(o!=null){if(a!==b(o)){e.push(g("Incorrect geometry type."));continue}const c=o.spatialReference??f;n.geometry=_(O(o,c),c,f)}if(m){const c=T(d,n.attributes,m);if(c){e.push(c);continue}}p.add(C(n,a,l,s,u)),e.push(j(t))}}_assignObjectId(e,i,a=!1){const s=this._queryEngine.objectIdField;a&&i&&isFinite(i[s])?e[s]=i[s]:e[s]=this._nextObjectId++}}export{We as default};
