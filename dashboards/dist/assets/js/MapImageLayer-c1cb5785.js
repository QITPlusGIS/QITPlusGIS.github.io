import{W as $,cP as b,bf as f,cW as w,z as g,Q as I,o as v,b as T,a as s,y as p,cX as x,S as E,T as O,c as M,aJ as P}from"./uuid-896b9aab.js";import{c as R,a as F}from"./arcgisLayerUrl-babbe1bf.js";import{t as L}from"./loadAll-9301c4be.js";import{m as j}from"./MultiOriginJSONSupport-3a78e066.js";import{i as J}from"./scaleUtils-abdae12b.js";import{i as N}from"./APIKeyMixin-60d9f7d0.js";import{E as U,f as q,X as A}from"./SublayersOwner-e5fc6d6e.js";import{l as _}from"./ArcGISService-ca2440e3.js";import{a as k}from"./BlendLayer-d89d05a2.js";import{o as z}from"./CustomParametersMixin-4711adcc.js";import{u as V}from"./OperationalLayer-db945a99.js";import{j as W}from"./PortalLayer-d46cf7fb.js";import{f as Z}from"./RefreshableLayer-216f1bc8.js";import{t as B}from"./ScaleRangeLayer-c70a8fe7.js";import{a as C}from"./TemporalLayer-1b7f1cb8.js";import{d as D}from"./commonProperties-6f21cf48.js";import{m as G}from"./ExportImageParameters-f3f7d163.js";import{t as H}from"./imageBitmapUtils-f0261fe6.js";import{e as S}from"./sublayerUtils-3deaaa2f.js";import{e as K}from"./versionUtils-5fe55710.js";import"./index-36e9aec6.js";import"./DictionaryLoader-3b50e321.js";import"./LRUCache-6cfe7ff6.js";import"./FieldsIndex-b9e92cab.js";import"./portalItemUtils-50147700.js";import"./CollectionFlattener-0d53fafe.js";import"./UniqueValueRenderer-5d584a21.js";import"./LegendOptions-cec1028c.js";import"./diffUtils-a3a9db51.js";import"./SizeVariable-b5ce232d.js";import"./colorRamps-25747e5c.js";import"./compilerUtils-b3a0c560.js";import"./lengthUtils-4ab57232.js";import"./ColorStop-3d508119.js";import"./jsonUtils-3767cca3.js";import"./layerUtils-71133796.js";import"./styleUtils-885e3cac.js";import"./jsonUtils-ac311f38.js";import"./heatmapUtils-27bad519.js";import"./vec4f64-3c9d0901.js";import"./QueryTask-7ee13cfe.js";import"./infoFor3D-24efd44a.js";import"./Query-2995d860.js";import"./Field-44a4dae2.js";import"./fieldType-39083810.js";import"./FullTextSearch-bf557d06.js";import"./QuantizationParameters-8e0f5300.js";import"./executeForIds-1c2fb3ce.js";import"./query-20f49266.js";import"./normalizeUtils-74c17e0f.js";import"./normalizeUtilsCommon-24d2691e.js";import"./pbfQueryUtils-9d4b7597.js";import"./pbf-b3c65c97.js";import"./OptimizedFeature-ded94d90.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-00692237.js";import"./executeQueryJSON-51fb0691.js";import"./FeatureSet-536478a2.js";import"./executeQueryPBF-00413614.js";import"./featureConversionUtils-35751811.js";import"./FeatureType-a5e62fd2.js";import"./FeatureTemplate-5d7372f9.js";import"./LabelClass-961ff56d.js";import"./labelUtils-21b484ec.js";import"./defaultsJSON-b087dd4d.js";import"./labelingInfo-926370a5.js";import"./LayerFloorInfo-fc9dcbd1.js";import"./serviceCapabilitiesUtils-40e4709f.js";import"./AttachmentQuery-98e24455.js";import"./popupUtils-ca8ca81d.js";import"./jsonUtils-84d8e543.js";import"./parser-14d23883.js";import"./mat4f32-60a2394b.js";import"./mat4-318655b6.js";import"./PortalItem-6f01e175.js";import"./ElevationInfo-8d60fc5a.js";import"./floorFilterUtils-080a7cd2.js";let o=class extends k(C(B(U(q(_(V(W(j(Z(N(z(F)))))))))))){constructor(...t){super(...t),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,i){return typeof t=="string"?{url:t,...i}:t}load(t){const i=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch($).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(t,i){const n=i.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(t,i,n,e){var h;if(!this.loaded||!t)return;const a=t.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let m=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(e.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;m=S(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");m=S(a,c.sublayers,b(c.origin))}}const l=[],y={writeSublayerStructure:m,...e};let d=m;a.forEach(r=>{const c=r.write({},y);l.push(c),d=d||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(i.layers=l),d&&(i.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(t,i,n,e){const a=(e==null?void 0:e.pixelRatio)||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian());const m=new G({layer:this,floors:e==null?void 0:e.floors,scale:J({extent:t,width:i})*a}),l=m.toJSON();m.destroy();const y=!(e!=null&&e.rotation)||this.version<10.3?{}:{rotation:-e.rotation},d=t==null?void 0:t.spatialReference,h=w(d);l.dpi*=a;const r={};if(e!=null&&e.timeExtent){const{start:c,end:u}=e.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:t&&t.xmin+","+t.ymin+","+t.xmax+","+t.ymax,bboxSR:h,imageSR:h,size:i+","+n,...l,...y,...r}}async fetchImage(t,i,n,e){const{data:a}=await this._fetchImage("image",t,i,n,e);return a}async fetchImageBitmap(t,i,n,e){const{data:a,url:m}=await this._fetchImage("blob",t,i,n,e);return H(a,m,e==null?void 0:e.signal)}async fetchRecomputedExtents(t={}){const i={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,i),{extent:e,fullExtent:a,timeExtent:m}=n,l=e||a;return{fullExtent:l&&I.fromJSON(l),timeExtent:m&&R.fromJSON({start:m[0],end:m[1]})}}loadAll(){return L(this,t=>{t(this.allSublayers)})}serviceSupportsSpatialReference(t){return K(this,t)}async _fetchImage(t,i,n,e,a){var y,d,h;const m={responseType:t,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,n,e,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((y=m.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:r}=await g(l,m);return{data:r,url:l}}catch(r){throw T(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([p(x("dateFieldsTimeReference"))],o.prototype,"dateFieldsTimeZone",void 0),s([p({type:Boolean})],o.prototype,"datesInUnknownTimezone",void 0),s([p()],o.prototype,"dpi",void 0),s([p()],o.prototype,"gdbVersion",void 0),s([p()],o.prototype,"imageFormat",void 0),s([E("imageFormat",["supportedImageFormatTypes"])],o.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],o.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],o.prototype,"imageMaxWidth",void 0),s([p()],o.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],o.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],o.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"popupEnabled",void 0),s([p(x("preferredTimeReference"))],o.prototype,"preferredTimeZone",void 0),s([p()],o.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],o.prototype,"sublayers",void 0),s([O("sublayers",{layers:{type:[A]},visibleLayers:{type:[P]}})],o.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],o.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],o.prototype,"type",void 0),s([p(D)],o.prototype,"url",void 0),o=s([M("esri.layers.MapImageLayer")],o);const xe=o;export{xe as default};
