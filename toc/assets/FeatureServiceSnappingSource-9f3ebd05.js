import{k6 as B,k7 as Z,k8 as W,fo as q,iG as G,a as s,b as a,c as S,aS as E,k9 as X,l as _,eV as j,ge as C,eL as J,f as b,d$ as Q,m as R,cB as K,ka as Y,kb as ee,ed as te,kc as x,aH as ie,b9 as ne,aD as se,eh as ae,cU as re,dF as oe,R as V,dL as le,a1 as de,b5 as ue,aC as he,em as pe,aP as ce,aw as A,dC as ye,kd as v,w as ge,hw as L,ke as fe,kf as ve}from"./index-797c09f0.js";import{i as we,o as _e}from"./queryEngineUtils-f46f3aca.js";import{h as Se}from"./WorkerHandle-6635cad1.js";import"./VertexSnappingCandidate-46a2a507.js";import"./PointSnappingHint-713a7d52.js";function O(e,t){return Z(t.extent,U),W(U,q(be,e.x,e.y,0))}const U=B(),be=G();let c=class extends E{get tiles(){const t=this.tilesCoveringView,i=this.pointOfInterest!=null?this.pointOfInterest:this.view.center;return t.sort((l,n)=>O(i,l)-O(i,n)),t}_scaleEnabled(){return X(this.view.scale,this.layer.minScale||0,this.layer.maxScale||0)}get tilesCoveringView(){if(!this.view.ready||!this.view.featuresTilingScheme||!this.view.state||this.tileInfo==null)return[];if(!this._scaleEnabled)return[];const{spans:t,lodInfo:i}=this.view.featuresTilingScheme.getTileCoverage(this.view.state,0),{level:l}=i,n=[];for(const{row:o,colFrom:r,colTo:d}of t)for(let u=r;u<=d;u++){const y=i.normalizeCol(u),g=new C(null,l,o,y);this.tileInfo.updateTileInfo(g),n.push(g)}return n}get tileInfo(){var t;return((t=this.view.featuresTilingScheme)==null?void 0:t.tileInfo)??null}get tileSize(){return this.tileInfo!=null?this.tileInfo.size[0]:256}constructor(t){super(t),this.pointOfInterest=null}initialize(){this.addHandles(_(()=>{var t,i;return(i=(t=this.view)==null?void 0:t.state)==null?void 0:i.viewpoint},()=>this.notifyChange("tilesCoveringView"),j))}};s([a({readOnly:!0})],c.prototype,"tiles",null),s([a({readOnly:!0})],c.prototype,"_scaleEnabled",null),s([a({readOnly:!0})],c.prototype,"tilesCoveringView",null),s([a({readOnly:!0})],c.prototype,"tileInfo",null),s([a({readOnly:!0})],c.prototype,"tileSize",null),s([a({constructOnly:!0})],c.prototype,"view",void 0),s([a({constructOnly:!0})],c.prototype,"layer",void 0),s([a()],c.prototype,"pointOfInterest",void 0),c=s([S("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles2D")],c);var T;(function(e){e[e.INVISIBLE=0]="INVISIBLE",e[e.VISIBLE_WHEN_EXTENDED=1]="VISIBLE_WHEN_EXTENDED",e[e.VISIBLE_ON_SURFACE=2]="VISIBLE_ON_SURFACE"})(T||(T={}));let f=class extends J{get tiles(){const t=this.tilesCoveringView,i=this._effectivePointOfInterest;if(i!=null){const l=t.map(n=>O(i,n));for(let n=1;n<l.length;n++)if(l[n-1]>l[n])return t.sort((o,r)=>O(i,o)-O(i,r)),t.slice()}return t}get tilesCoveringView(){var t,i;return this._filterTiles((i=(t=this.view.featureTiles)==null?void 0:t.tiles)==null?void 0:i.toArray()).map(me)}get tileInfo(){var t;return((t=this.view.featureTiles)==null?void 0:t.tilingScheme.toTileInfo())??null}get tileSize(){var t;return((t=this.view.featureTiles)==null?void 0:t.tileSize)??256}get _effectivePointOfInterest(){var i;const t=this.pointOfInterest;return t??((i=this.view.pointsOfInterest)==null?void 0:i.focus.location)}constructor(t){super(t),this.pointOfInterest=null}initialize(){this.handles.add(_(()=>this.view.featureTiles,t=>{this.handles.remove(D),t&&this.handles.add(t.addClient(),D)},b))}_filterTiles(t){return t==null?[]:t.filter(i=>Math.abs(i.measures.screenRect[3]-i.measures.screenRect[1])>Ie&&i.measures.visibility===T.VISIBLE_ON_SURFACE)}};function me({lij:[e,t,i],extent:l}){return new C(`${e}/${t}/${i}`,e,t,i,l)}s([a({readOnly:!0})],f.prototype,"tiles",null),s([a({readOnly:!0})],f.prototype,"tilesCoveringView",null),s([a({readOnly:!0})],f.prototype,"tileInfo",null),s([a({readOnly:!0})],f.prototype,"tileSize",null),s([a({constructOnly:!0})],f.prototype,"view",void 0),s([a()],f.prototype,"pointOfInterest",void 0),s([a()],f.prototype,"_effectivePointOfInterest",null),f=s([S("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles3D")],f);const Ie=50,D="feature-tiles",Oe=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let m=class extends E{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=Oe.map(e=>new Q({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}})),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=o=>{if(o.label!=null)return o.label;let r=o.lij.toString();return o.loadPriority!=null&&(r+=` (${o.loadPriority})`),r},t=this.getTiles(),i=new Array,l=new Set((this._labels.size,this._labels.keys()));t.forEach((o,r)=>{const d=o.lij.toString();l.delete(d);const u=o.lij[0],y=o.geometry;if(this.enablePolygons&&!this._polygons.has(d)){const g=new R({geometry:y,symbol:this._symbols[u%this._symbols.length]});this._polygons.set(d,g),i.push(g)}if(this.enableLabels){const g=e(o),P=r/(t.length-1),$=x(0,200,P),F=x(20,6,P)/.75,z=o.loadPriority!=null&&o.loadPriority>=t.length,N=new K([$,z?0:$,z?0:$]),M=this.view.type==="3d"?()=>new Y({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new ee({text:g,halo:{color:"white",size:1/.75},material:{color:N},size:F})]}):()=>new te({text:g,haloColor:"white",haloSize:1/.75,color:N,size:F}),k=this._labels.get(d);if(k){const I=M();k.symbol!=null&&JSON.stringify(I)===JSON.stringify(k.symbol)||(k.symbol=I)}else{const I=new R({geometry:y.extent.center,symbol:M()});this._labels.set(d,I),i.push(I)}}});const n=new Array;l.forEach(o=>{const r=this._polygons.get(o);r!=null&&(n.push(r),this._polygons.delete(o));const d=this._labels.get(o);d!=null&&(n.push(d),this._labels.delete(o))}),this.view.graphics.removeMany(n),this.view.graphics.addMany(i)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};s([a({constructOnly:!0})],m.prototype,"view",void 0),s([a({readOnly:!0})],m.prototype,"updating",void 0),s([a()],m.prototype,"enabled",null),m=s([S("esri.views.support.TileTreeDebugger")],m);let H=class extends m{constructor(e){super(e),this._handles=new ie}initialize(){const e=setInterval(()=>this._fetchDebugInfo(),2e3);this._handles.add(ne(()=>clearInterval(e)))}destroy(){this._handles.destroy()}getTiles(){if(!this._debugInfo)return[];const e=new Map,t=new Map;this._debugInfo.storedTiles.forEach(n=>{e.set(n.data.id,n.featureCount)}),this._debugInfo.pendingTiles.forEach(n=>{e.set(n.data.id,n.featureCount),t.set(n.data.id,n.state)});const i=n=>{const o=t.get(n),r=e.get(n)??"?";return o?`${o}:${r}
${n}`:`store:${r}
${n}`},l=new Map;return this._debugInfo.storedTiles.forEach(n=>{l.set(n.data.id,n.data)}),this._debugInfo.pendingTiles.forEach(n=>{l.set(n.data.id,n.data)}),Array.from(l.values()).map(n=>({lij:[n.level,n.row,n.col],geometry:se.fromExtent(ae(n.extent,this.view.spatialReference)),label:i(n.id)}))}_fetchDebugInfo(){this.handle.getDebugInfo(null).then(e=>{this._debugInfo=e,this.update()})}};s([a({constructOnly:!0})],H.prototype,"handle",void 0),H=s([S("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],H);let h=class extends J{get updating(){return this.updatingHandles.updating||this._workerHandleUpdating}constructor(e){super(e),this.schedule=null,this.hasZ=!1,this.elevationAlignPointsInFeatures=async t=>{const i=[];for(const{points:l}of t)for(const{z:n}of l)i.push(n);return{elevations:i,drapedObjectIds:new Set,failedObjectIds:new Set}},this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]}),this.availability=0,this._workerHandleUpdating=!0,this._editId=0}destroy(){this._workerHandle.destroy()}initialize(){this._workerHandle=new ke(this.schedule,{alignElevation:async(e,{signal:t})=>({result:await this.elevationAlignPointsInFeatures(e.points,t)}),getSymbologyCandidates:async(e,{signal:t})=>({result:await this.queryForSymbologySnapping(e,t)})}),this.handles.add([this._workerHandle.on("notify-updating",({updating:e})=>this._workerHandleUpdating=e),this._workerHandle.on("notify-availability",({availability:e})=>this._set("availability",e))])}async setup(e,t){var n;const i=this._serviceInfoFromLayer(e.layer);if(i==null)return;const l={configuration:this._convertConfiguration(e.configuration),serviceInfo:i,spatialReference:e.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:(n=e.layer.elevationInfo)==null?void 0:n.toJSON()};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",l,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async configure(e,t){const i=this._convertConfiguration(e);await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",i,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async refresh(e){await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async fetchCandidates(e,t){const i=e.point,l={distance:e.distance,mode:e.mode,point:re(i[0],i[1],i[2],e.coordinateHelper.spatialReference.toJSON()),returnEdge:e.returnEdge,returnVertex:e.returnVertex,filter:e.filter!=null?e.filter.toJSON():null};return this._workerHandle.invoke(l,t)}async updateTiles(e,t){const i={tiles:e.tiles,tileInfo:e.tileInfo!=null?e.tileInfo.toJSON():null,tileSize:e.tileSize};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",i,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async applyEdits(e,t){var r,d,u;const i=this._editId++,l={id:i};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("beginApplyEdits",l,t));const n=await this.updatingHandles.addPromise(oe(e.result,t)),o={id:i,edits:{addedFeatures:((r=n.addedFeatures)==null?void 0:r.map(({objectId:y})=>y).filter(V))??[],deletedFeatures:((d=n.deletedFeatures)==null?void 0:d.map(({objectId:y,globalId:g})=>({objectId:y,globalId:g})))??[],updatedFeatures:((u=n.updatedFeatures)==null?void 0:u.map(({objectId:y})=>y).filter(V))??[]}};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("endApplyEdits",o,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}getDebugInfo(e){return this._workerHandle.invokeMethod("getDebugInfo",{},e)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(e){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",e)}_convertConfiguration(e){return{filter:e.filter!=null?e.filter.toJSON():null,customParameters:e.customParameters,viewType:e.viewType}}_serviceInfoFromLayer(e){var t,i;return e.geometryType==="multipatch"||e.geometryType==="mesh"?null:{url:((t=e.parsedUrl)==null?void 0:t.path)??"",fields:e.fields.map(l=>l.toJSON()),geometryType:le.toJSON(e.geometryType),capabilities:e.capabilities,objectIdField:e.objectIdField,globalIdField:e.globalIdField,spatialReference:e.spatialReference.toJSON(),timeInfo:(i=e.timeInfo)==null?void 0:i.toJSON()}}};s([a({constructOnly:!0})],h.prototype,"schedule",void 0),s([a({constructOnly:!0})],h.prototype,"hasZ",void 0),s([a({constructOnly:!0})],h.prototype,"elevationAlignPointsInFeatures",void 0),s([a({constructOnly:!0})],h.prototype,"queryForSymbologySnapping",void 0),s([a({readOnly:!0})],h.prototype,"updating",null),s([a({readOnly:!0})],h.prototype,"availability",void 0),s([a()],h.prototype,"_workerHandleUpdating",void 0),h=s([S("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],h);class ke extends Se{constructor(t,i){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:i})}}let w=class extends E{get tiles(){return[new C("0/0/0",0,0,0,de(-1e8,-1e8,1e8,1e8))]}get tileInfo(){return new ue({origin:new he({x:-1e8,y:1e8,spatialReference:this.layer.spatialReference}),size:[512,512],lods:[new pe({level:0,scale:1,resolution:390625})],spatialReference:this.layer.spatialReference})}get tileSize(){return this.tileInfo.size[0]}constructor(e){super(e),this.pointOfInterest=null}};s([a({readOnly:!0})],w.prototype,"tiles",null),s([a({readOnly:!0})],w.prototype,"tileInfo",null),s([a({readOnly:!0})],w.prototype,"tileSize",null),s([a({constructOnly:!0})],w.prototype,"layer",void 0),s([a()],w.prototype,"pointOfInterest",void 0),w=s([S("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTilesSimple")],w);let p=class extends ce(E){get _updateTilesParameters(){return{tiles:this._tilesOfInterest.tiles,tileInfo:this._tilesOfInterest.tileInfo,tileSize:this._tilesOfInterest.tileSize}}get updating(){var e;return((e=this._workerHandle)==null?void 0:e.updating)||this.updatingHandles.updating}get configuration(){const{view:e}=this,t=e!=null?e.type:"2d";return{filter:this._layer.createQuery(),customParameters:this._layer.customParameters,viewType:t}}get availability(){var e;return((e=this._workerHandle)==null?void 0:e.availability)??0}get _layer(){return this.layerSource.layer}constructor(e){super(e),this._workerHandle=null,this._debug=null}initialize(){let e;const t=this.view;if(t!=null)switch(t.type){case"2d":this._tilesOfInterest=new c({view:t,layer:this._layer}),e=this._workerHandle=new h;break;case"3d":{const{resourceController:i}=t,l=this._layer,n=t.whenLayerView(l);this._tilesOfInterest=new f({view:t}),e=this._workerHandle=new h({schedule:r=>i.immediate.schedule(r),hasZ:this._layer.hasZ&&(this._layer.returnZ??!0),elevationAlignPointsInFeatures:async(r,d)=>{const u=await n;return A(d),u.elevationAlignPointsInFeatures(r,d)},queryForSymbologySnapping:async(r,d)=>{const u=await n;return A(d),u.queryForSymbologySnapping(r,d)}});const o=ve(null);n.then(r=>o.value=r),this.addHandles([t.elevationProvider.on("elevation-change",({context:r})=>{const{elevationInfo:d}=l;ye(r,d)&&v(e.notifyElevationSourceChange())}),_(()=>l.elevationInfo,()=>v(e.notifyElevationSourceChange()),b),_(()=>{var r,d;return(d=(r=o.value)==null?void 0:r.processor)==null?void 0:d.renderer},()=>v(e.notifySymbologyChange()),b),_(()=>{var r;return((r=o.value)==null?void 0:r.symbologySnappingSupported)??!1},r=>v(e.setSymbologySnappingSupported(r)),b),ge(()=>{var r;return(r=o.value)==null?void 0:r.layer},["edits","apply-edits","graphic-update"],()=>e.notifySymbologyChange())]);break}}else this._tilesOfInterest=new w({layer:this._layer}),e=this._workerHandle=new h;this.handles.add([L(e)]),v(e.setup({layer:this._layer,spatialReference:this.spatialReference,configuration:this.configuration},null)),this.updatingHandles.add(()=>this._updateTilesParameters,()=>v(e.updateTiles(this._updateTilesParameters,null)),b),this.handles.add([_(()=>this.configuration,i=>v(e.configure(i,null)),j)]),t!=null&&this.handles.add(_(()=>fe.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES,i=>{i&&!this._debug?(this._debug=new H({view:t,handle:e}),this.handles.add(L(this._debug),"debug")):!i&&this._debug&&this.handles.remove("debug")},b)),this.handles.add(this.layerSource.layer.on("apply-edits",i=>{v(e.applyEdits(i,null))}))}refresh(){var e;(e=this._workerHandle)==null||e.refresh(null)}async fetchCandidates(e,t){const{coordinateHelper:i,point:l}=e;this._tilesOfInterest.pointOfInterest=i.arrayToPoint(l);const n=this._getGroundElevation;return(await this._workerHandle.fetchCandidates({...e},t)).candidates.map(o=>we(o,n))}getDebugInfo(e){return this._workerHandle.getDebugInfo(e)}get _getGroundElevation(){return _e(this.view)}};s([a({constructOnly:!0})],p.prototype,"spatialReference",void 0),s([a({constructOnly:!0})],p.prototype,"layerSource",void 0),s([a({constructOnly:!0})],p.prototype,"view",void 0),s([a()],p.prototype,"_tilesOfInterest",void 0),s([a({readOnly:!0})],p.prototype,"_updateTilesParameters",null),s([a({readOnly:!0})],p.prototype,"updating",null),s([a({readOnly:!0})],p.prototype,"configuration",null),s([a({readOnly:!0})],p.prototype,"availability",null),s([a()],p.prototype,"_getGroundElevation",null),p=s([S("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],p);export{p as FeatureServiceSnappingSource};
