import{ei as y,ej as p,ek as u,el as d,em as h,en as c,l as S,eo as m,ay as v,ep as f,as as g,D as o,E as r,bs as b,aS as C,eq as G,er as _,es as j,F as k,et as n,bF as w,eu as x,bE as F,ev as P,aM as R}from"./index-a8f4225e.js";const E=["atom","xml"],$={base:n,key:"type",typeMap:{"simple-line":w},errorContext:"symbol"},M={base:n,key:"type",typeMap:{"picture-marker":x,"simple-marker":F},errorContext:"symbol"},L={base:n,key:"type",typeMap:{"simple-fill":P},errorContext:"symbol"};let t=class extends y(p(u(d(h(c(R)))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,s){return typeof e=="string"?{url:e,...s}:e}readFeatureCollections(e,s){return s.featureCollection.layers.forEach(i=>{var a;const l=i.layerDefinition.drawingInfo.renderer.symbol;l&&l.type==="esriSFS"&&((a=l.outline)!=null&&a.style.includes("esriSFS"))&&(l.outline.style="esriSLSSolid")}),s.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&this.originOf("title")!=="defaults"?e:this.url?S(this.url,E)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const s=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(m).then(()=>this._fetchService(s)).then(i=>{this.read(i,{origin:"service"})})),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const s=this.spatialReference,{data:i}=await v(g.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:f(s)?void 0:s.wkid??JSON.stringify(s)},signal:e});return i}_hasGeometry(e){var s;return((s=this.featureCollections)==null?void 0:s.some(i=>{var l,a;return((l=i.featureSet)==null?void 0:l.geometryType)===e&&((a=i.featureSet.features)==null?void 0:a.length)>0}))??!1}};o([r()],t.prototype,"description",void 0),o([r()],t.prototype,"featureCollections",void 0),o([b("service","featureCollections",["featureCollection.layers"])],t.prototype,"readFeatureCollections",null),o([r({type:C,json:{name:"lookAtExtent"}})],t.prototype,"fullExtent",void 0),o([r(G)],t.prototype,"id",void 0),o([r(_)],t.prototype,"legendEnabled",void 0),o([r({types:$,json:{write:!0}})],t.prototype,"lineSymbol",void 0),o([r({type:["show","hide"]})],t.prototype,"listMode",void 0),o([r({types:M,json:{write:!0}})],t.prototype,"pointSymbol",void 0),o([r({types:L,json:{write:!0}})],t.prototype,"polygonSymbol",void 0),o([r({type:["GeoRSS"]})],t.prototype,"operationalLayerType",void 0),o([r(j)],t.prototype,"url",void 0),o([r({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],t.prototype,"title",null),o([r({readOnly:!0,json:{read:!1},value:"geo-rss"})],t.prototype,"type",void 0),t=o([k("esri.layers.GeoRSSLayer")],t);const O=t;export{O as default};
