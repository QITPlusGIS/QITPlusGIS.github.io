import{bH as b,cX as M,d3 as R,cW as P,d0 as V}from"./index-a8f4225e.js";import{n as $,i as w}from"./cimAnalyzer-0b8074fa.js";import{GeometryStyle as x,CIMSymbolRasterizer as q}from"./CIMSymbolRasterizer-ec1f87ee.js";import"./fontUtils-7c05d086.js";import"./BidiEngine-9a40f2f4.js";import"./OptimizedGeometry-196224d4.js";import"./GeometryUtils-984e8446.js";import"./enums-f1a6a48a.js";import"./alignmentUtils-ae955d28.js";import"./definitions-25fcdc57.js";import"./number-e491b09e.js";import"./Rect-ea14f53a.js";import"./callExpressionWithFeature-7fdc4ff4.js";import"./quantizationUtils-443ae158.js";import"./floatRGBA-c29af8d7.js";import"./CIMResourceManager-b3c8a77e.js";import"./Rasterizer-20252224.js";import"./rasterizingUtils-3c1c5d48.js";import"./imageutils-75dcf644.js";const c=new q(null,!0),p=b(M.size),F=b(M.maxSize),D=b(M.lineWidth),E=1;function W(t){const e=t==null?void 0:t.size;return typeof e=="number"?{width:e,height:e}:{width:e!=null&&typeof e=="object"&&"width"in e?e.width:null,height:e!=null&&typeof e=="object"&&"height"in e?e.height:null}}async function ae(t,e={}){var I;const{node:v,opacity:S,symbolConfig:n}=e,G=n!=null&&typeof n=="object"&&"isSquareFill"in n&&n.isSquareFill,C=e.cimOptions||e,l=C.geometryType||R((I=t==null?void 0:t.data)==null?void 0:I.symbol),i=W(e),{feature:L,fieldMap:z}=C;if(i.width==null||i.height==null){const o=await $.resolveSymbolOverrides(t.data,L,null,z,l);if(!o)return null;(t=t.clone()).data={type:"CIMSymbolReference",symbol:o},t.data.primitiveOverrides=void 0;const h=[];w.fetchResources(o,c.resourceManager,h),w.fetchFonts(o,c.resourceManager,h),h.length>0&&await Promise.all(h);const r=w.getEnvelope(o,null,c.resourceManager),f=r==null?void 0:r.width,g=r==null?void 0:r.height;i.width=l==="esriGeometryPolygon"?p:l==="esriGeometryPolyline"?D:f!=null&&isFinite(f)?Math.min(f,F):p,i.height=l==="esriGeometryPolygon"?p:g!=null&&isFinite(g)?Math.max(Math.min(g,F),E):p}const u=await c.rasterizeCIMSymbolAsync(t,L,i,G||l!=="esriGeometryPolygon"?x.Preview:x.Legend,z,l);if(!u)return null;const{width:j,height:O}=u,s=document.createElement("canvas");s.width=j,s.height=O,s.getContext("2d").putImageData(u,0,0);const y=P(i.width),d=P(i.height),a=new Image(y,d);a.src=s.toDataURL(),a.ariaLabel=e.ariaLabel??null,a.alt=e.ariaLabel??"",S!=null&&(a.style.opacity=`${S}`);let m=a;if(e.effectView!=null){const o={shape:{type:"image",x:0,y:0,width:y,height:d,src:a.src},fill:null,stroke:null,offset:[0,0]};m=V([[o]],[y,d],{effectView:e.effectView,ariaLabel:e.ariaLabel})}return v&&m&&v.appendChild(m),m}export{ae as previewCIMSymbol};
