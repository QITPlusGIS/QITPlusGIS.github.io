import{gw as f,gx as m,gy as g,gz as w,gA as _,D as y,F as E,bY as v,bD as u,y as L,gB as V,gC as j,gD as b,bZ as h}from"./index-285b86bc.js";import{W as C}from"./Octree-695bb8a1.js";import{m as P}from"./edgeProcessing-5d5f039b.js";import"./deduplicate-e9648d89.js";import"./Indices-6bebb175.js";import"./InterleavedLayout-773eb1b8.js";import"./BufferView-d2b0c642.js";import"./types-1305598a.js";import"./glUtil-0b7ee6ea.js";import"./enums-b14466b3.js";import"./VertexElementDescriptor-2925c6af.js";const S=1e3;function $(t,e,n){const o=w(),s=_(o);return f(s,s,t,.5),f(s,s,e,.5),o[3]=m(s,t),g(s,s,n),o}let l=class{constructor(){this._idToComponent=new Map,this._components=new C(t=>t.bounds),this._edges=new C(t=>t.bounds),this._tmpLineSegment=v(),this._tmpP1=u(),this._tmpP2=u(),this._tmpP3=u(),this.remoteClient=null}async fetchCandidates(t,e){await Promise.resolve(),L(e),await this._ensureEdgeLocations(t,e);const n=[];return this._edges.forEachNeighbor(o=>(this._addCandidates(t,o,n),n.length<S),t.bounds),{result:{candidates:n}}}async _ensureEdgeLocations(t,e){const n=[];if(this._components.forEachNeighbor(i=>{if(i.info==null){const{id:a,uid:d}=i;n.push({id:a,uid:d})}return!0},t.bounds),!n.length)return;const o={components:n},s=await this.remoteClient.invoke("fetchAllEdgeLocations",o,e??{});for(const i of s.components)this._setFetchEdgeLocations(i)}async add(t){const e=new p(t.id,t.bounds);return this._idToComponent.set(e.id,e),this._components.add([e]),{result:{}}}async remove(t){const e=this._idToComponent.get(t.id);if(e){const n=[];this._edges.forEachNeighbor(o=>(o.component===e&&n.push(o),!0),e.bounds),this._edges.remove(n),this._components.remove([e]),this._idToComponent.delete(e.id)}return{result:{}}}_setFetchEdgeLocations(t){const e=this._idToComponent.get(t.id);if(e==null||t.uid!==e.uid)return;const n=P.createView(t.locations),o=new Array(n.count),s=u(),i=u();for(let r=0;r<n.count;r++){n.position0.getVec(r,s),n.position1.getVec(r,i);const c=$(s,i,t.origin),x=new I(e,r,c);o[r]=x}this._edges.add(o);const{objectIds:a,origin:d}=t;e.info={locations:n,objectIds:a,origin:d}}_addCandidates(t,e,n){const{info:o}=e.component,{origin:s,objectIds:i}=o,a=o.locations,d=a.position0.getVec(e.index,this._tmpP1),r=a.position1.getVec(e.index,this._tmpP2);g(d,d,s),g(r,r,s);const c=i[a.componentIndex.get(e.index)];this._addEdgeCandidate(t,c,d,r,n),this._addVertexCandidate(t,c,d,n),this._addVertexCandidate(t,c,r,n)}_addEdgeCandidate(t,e,n,o,s){if(!t.returnEdge)return;const i=_(t.bounds),a=V(n,o,this._tmpLineSegment),d=j(a,i,this._tmpP3);b(t.bounds,d)&&s.push({type:"edge",objectId:e,target:h(d),distance:m(i,d),start:h(n),end:h(o)})}_addVertexCandidate(t,e,n,o){if(!t.returnVertex)return;const s=_(t.bounds);b(t.bounds,n)&&o.push({type:"vertex",objectId:e,target:h(n),distance:m(s,n)})}};l=y([E("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],l);const Q=l;class p{constructor(e,n){this.id=e,this.bounds=n,this.info=null,this.uid=++p.uid}}p.uid=0;class I{constructor(e,n,o){this.component=e,this.index=n,this.bounds=o}}export{Q as default};
